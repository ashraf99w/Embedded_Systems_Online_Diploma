
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d3c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000e6c  08000e6c  00010e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e90  08000e90  00010e98  2**0
                  CONTENTS
  4 .ARM          00000000  08000e90  08000e90  00010e98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e90  08000e98  00010e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e90  08000e90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e94  08000e94  00010e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000e98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e98  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e98  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041e6  00000000  00000000  00010ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a67  00000000  00000000  000150a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c1c  00000000  00000000  00015b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000200  00000000  00000000  00016730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a8  00000000  00000000  00016930  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000013fc  00000000  00000000  00016ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002231  00000000  00000000  00017ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b2ab  00000000  00000000  0001a105  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000253b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000668  00000000  00000000  0002542c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e54 	.word	0x08000e54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e54 	.word	0x08000e54

08000170 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_init+0x154>)
 80001c4:	f000 fa60 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_init+0x154>)
 80001e0:	f000 fa52 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_init+0x154>)
 80001fc:	f000 fa44 	bl	8000688 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_init+0x154>)
 8000216:	f000 fa37 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_init+0x154>)
 8000230:	f000 fa2a 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_init+0x154>)
 800024a:	f000 fa1d 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_init+0x154>)
 8000264:	f000 fa10 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_init+0x154>)
 800027e:	f000 fa03 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_init+0x154>)
 8000298:	f000 f9f6 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_init+0x154>)
 80002b2:	f000 f9e9 	bl	8000688 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_init+0x154>)
 80002cc:	f000 f9dc 	bl	8000688 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_init+0x154>)
 80002d8:	f000 fa8e 	bl	80007f8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_init+0x154>)
 80002e4:	f000 fa88 	bl	80007f8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_init+0x154>)
 80002f0:	f000 fa82 	bl	80007f8 <MCAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000024 	.word	0x20000024
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 f857 	bl	80003b8 <LCD_WRITE_COMMAND>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <LCD_lcd_kick+0x28>)
 800031c:	f000 fa6c 	bl	80007f8 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f7ff ff25 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <LCD_lcd_kick+0x28>)
 800032e:	f000 fa63 	bl	80007f8 <MCAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	460a      	mov	r2, r1
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	4613      	mov	r3, r2
 800034a:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d108      	bne.n	8000364 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d805      	bhi.n	8000364 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b80      	subs	r3, #128	; 0x80
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f82a 	bl	80003b8 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d108      	bne.n	800037c <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d805      	bhi.n	800037c <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	3b40      	subs	r3, #64	; 0x40
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f81e 	bl	80003b8 <LCD_WRITE_COMMAND>
		}
	}
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_INIT>:

void LCD_INIT() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000388:	2014      	movs	r0, #20
 800038a:	f7ff fef1 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800038e:	f7ff ff0b 	bl	80001a8 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff feec 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 8000398:	f7ff ffb2 	bl	8000300 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800039c:	2038      	movs	r0, #56	; 0x38
 800039e:	f000 f80b 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003a2:	2006      	movs	r0, #6
 80003a4:	f000 f808 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f000 f805 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003ae:	200f      	movs	r0, #15
 80003b0:	f000 f802 	bl	80003b8 <LCD_WRITE_COMMAND>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003ca:	f000 fa07 	bl	80007dc <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003d6:	f000 fa0f 	bl	80007f8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003e2:	f000 fa09 	bl	80007f8 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff fec2 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003ec:	f7ff ff90 	bl	8000310 <LCD_lcd_kick>

}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	b29b      	uxth	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_WRITE_CHAR+0x40>)
 800040e:	f000 f9e5 	bl	80007dc <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <LCD_WRITE_CHAR+0x40>)
 800041a:	f000 f9ed 	bl	80007f8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_WRITE_CHAR+0x40>)
 8000426:	f000 f9e7 	bl	80007f8 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff fea0 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000430:	f7ff ff6e 	bl	8000310 <LCD_lcd_kick>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800044c:	e01c      	b.n	8000488 <LCD_WRITE_STRING+0x48>
		count++;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffcd 	bl	80003fc <LCD_WRITE_CHAR>
		if (count == 16) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b10      	cmp	r3, #16
 8000466:	d104      	bne.n	8000472 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000468:	2100      	movs	r1, #0
 800046a:	2002      	movs	r0, #2
 800046c:	f7ff ff66 	bl	800033c <LCD_GOTO_XY>
 8000470:	e00a      	b.n	8000488 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b20      	cmp	r3, #32
 8000476:	d107      	bne.n	8000488 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000478:	f7ff ff42 	bl	8000300 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff5c 	bl	800033c <LCD_GOTO_XY>
			count = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1de      	bne.n	800044e <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <wait>:


unsigned int IRQ_flag=0;


void wait (uint32_t time) {
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	e00b      	b.n	80004be <wait+0x26>
		for (j = 0; j < 255; j++);
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	e002      	b.n	80004b2 <wait+0x1a>
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2bfe      	cmp	r3, #254	; 0xfe
 80004b6:	d9f9      	bls.n	80004ac <wait+0x14>
	for (i = 0; i < time; i++)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3ef      	bcc.n	80004a6 <wait+0xe>
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	IRQ_flag=1;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI9_CallBack+0x1c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI is happend _|-");
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <EXTI9_CallBack+0x20>)
 80004dc:	f7ff ffb0 	bl	8000440 <LCD_WRITE_STRING>
	wait(1000);
 80004e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e4:	f7ff ffd8 	bl	8000498 <wait>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000001c 	.word	0x2000001c
 80004f0:	08000e6c 	.word	0x08000e6c

080004f4 <main>:


int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <main+0x6c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <main+0x6c>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <main+0x6c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a15      	ldr	r2, [pc, #84]	; (8000560 <main+0x6c>)
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0x6c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <main+0x6c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
	LCD_INIT();
 800051e:	f7ff ff31 	bl	8000384 <LCD_INIT>
	LCD_clear_screen();
 8000522:	f7ff feed 	bl	8000300 <LCD_clear_screen>


	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN=EXTI9PB9;
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <main+0x70>)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	ca07      	ldmia	r2, {r0, r1, r2}
 800052c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case=EXTI_Trigger_RISING;
 8000530:	2300      	movs	r3, #0
 8000532:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack=EXTI9_CallBack;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0x74>)
 8000536:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN=EXTI_IRQ_Enable;
 8000538:	2301      	movs	r3, #1
 800053a:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fb2a 	bl	8000b98 <MCAL_EXTI_GPIO_Init>
	IRQ_flag=1;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <main+0x78>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]


	/* Loop forever */
	while(1)
	{
		if(IRQ_flag)
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <main+0x78>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0fb      	beq.n	800054a <main+0x56>
		{
			LCD_clear_screen();
 8000552:	f7ff fed5 	bl	8000300 <LCD_clear_screen>
			IRQ_flag=0;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <main+0x78>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
		if(IRQ_flag)
 800055c:	e7f5      	b.n	800054a <main+0x56>
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	08000e84 	.word	0x08000e84
 8000568:	080004d1 	.word	0x080004d1
 800056c:	2000001c 	.word	0x2000001c

08000570 <Reset_Handler>:
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x2>)
 8000572:	4685      	mov	sp, r0
 8000574:	f3af 8000 	nop.w
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
 800057e:	2300      	movs	r3, #0
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:
 8000582:	58d4      	ldr	r4, [r2, r3]
 8000584:	50c4      	str	r4, [r0, r3]
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:
 8000588:	18c4      	adds	r4, r0, r3
 800058a:	428c      	cmp	r4, r1
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
 8000592:	2300      	movs	r3, #0
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:
 800059a:	42a2      	cmp	r2, r4
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>
 800059e:	f000 fc35 	bl	8000e0c <__libc_init_array>
 80005a2:	f7ff ffa7 	bl	80004f4 <main>

080005a6 <LoopForever>:
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
 80005a8:	20002800 	.word	0x20002800
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000000 	.word	0x20000000
 80005b4:	08000e98 	.word	0x08000e98
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000064 	.word	0x20000064

080005c0 <ADC1_2_IRQHandler>:
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>

080005c2 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	2b80      	cmp	r3, #128	; 0x80
 80005d0:	d042      	beq.n	8000658 <Get_CRLH_Position+0x96>
 80005d2:	2b80      	cmp	r3, #128	; 0x80
 80005d4:	dc11      	bgt.n	80005fa <Get_CRLH_Position+0x38>
 80005d6:	2b08      	cmp	r3, #8
 80005d8:	d036      	beq.n	8000648 <Get_CRLH_Position+0x86>
 80005da:	2b08      	cmp	r3, #8
 80005dc:	dc06      	bgt.n	80005ec <Get_CRLH_Position+0x2a>
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d02e      	beq.n	8000640 <Get_CRLH_Position+0x7e>
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d02e      	beq.n	8000644 <Get_CRLH_Position+0x82>
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d028      	beq.n	800063c <Get_CRLH_Position+0x7a>
 80005ea:	e047      	b.n	800067c <Get_CRLH_Position+0xba>
 80005ec:	2b20      	cmp	r3, #32
 80005ee:	d02f      	beq.n	8000650 <Get_CRLH_Position+0x8e>
 80005f0:	2b40      	cmp	r3, #64	; 0x40
 80005f2:	d02f      	beq.n	8000654 <Get_CRLH_Position+0x92>
 80005f4:	2b10      	cmp	r3, #16
 80005f6:	d029      	beq.n	800064c <Get_CRLH_Position+0x8a>
 80005f8:	e040      	b.n	800067c <Get_CRLH_Position+0xba>
 80005fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005fe:	d033      	beq.n	8000668 <Get_CRLH_Position+0xa6>
 8000600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000604:	dc09      	bgt.n	800061a <Get_CRLH_Position+0x58>
 8000606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800060a:	d029      	beq.n	8000660 <Get_CRLH_Position+0x9e>
 800060c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000610:	d028      	beq.n	8000664 <Get_CRLH_Position+0xa2>
 8000612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000616:	d021      	beq.n	800065c <Get_CRLH_Position+0x9a>
 8000618:	e030      	b.n	800067c <Get_CRLH_Position+0xba>
 800061a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061e:	d027      	beq.n	8000670 <Get_CRLH_Position+0xae>
 8000620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000624:	dc03      	bgt.n	800062e <Get_CRLH_Position+0x6c>
 8000626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800062a:	d01f      	beq.n	800066c <Get_CRLH_Position+0xaa>
 800062c:	e026      	b.n	800067c <Get_CRLH_Position+0xba>
 800062e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000632:	d01f      	beq.n	8000674 <Get_CRLH_Position+0xb2>
 8000634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000638:	d01e      	beq.n	8000678 <Get_CRLH_Position+0xb6>
 800063a:	e01f      	b.n	800067c <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800063c:	2300      	movs	r3, #0
 800063e:	e01e      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000640:	2304      	movs	r3, #4
 8000642:	e01c      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000644:	2308      	movs	r3, #8
 8000646:	e01a      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 8000648:	230c      	movs	r3, #12
 800064a:	e018      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800064c:	2310      	movs	r3, #16
 800064e:	e016      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000650:	2314      	movs	r3, #20
 8000652:	e014      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000654:	2318      	movs	r3, #24
 8000656:	e012      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000658:	231c      	movs	r3, #28
 800065a:	e010      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 800065c:	2300      	movs	r3, #0
 800065e:	e00e      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000660:	2304      	movs	r3, #4
 8000662:	e00c      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000664:	2308      	movs	r3, #8
 8000666:	e00a      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000668:	230c      	movs	r3, #12
 800066a:	e008      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800066c:	2310      	movs	r3, #16
 800066e:	e006      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000670:	2314      	movs	r3, #20
 8000672:	e004      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000674:	2318      	movs	r3, #24
 8000676:	e002      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000678:	231c      	movs	r3, #28
 800067a:	e000      	b.n	800067e <Get_CRLH_Position+0xbc>
		break ;


	}
return 0 ;
 800067c:	2300      	movs	r3, #0

}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 8000696:	2300      	movs	r3, #0
 8000698:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d801      	bhi.n	80006a6 <MCAL_GPIO_Init+0x1e>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	e001      	b.n	80006aa <MCAL_GPIO_Init+0x22>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3304      	adds	r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff86 	bl	80005c2 <Get_CRLH_Position>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	230f      	movs	r3, #15
 80006bc:	4093      	lsls	r3, r2
 80006be:	43da      	mvns	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	401a      	ands	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) ||
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d00b      	beq.n	80006ea <MCAL_GPIO_Init+0x62>
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	2b05      	cmp	r3, #5
 80006d8:	d007      	beq.n	80006ea <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	789b      	ldrb	r3, [r3, #2]
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) ||
 80006de:	2b07      	cmp	r3, #7
 80006e0:	d003      	beq.n	80006ea <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	789b      	ldrb	r3, [r3, #2]
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d11c      	bne.n	8000724 <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	789b      	ldrb	r3, [r3, #2]
 80006ee:	3b04      	subs	r3, #4
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	b25a      	sxtb	r2, r3
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000706:	7afc      	ldrb	r4, [r7, #11]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff58 	bl	80005c2 <Get_CRLH_Position>
 8000712:	4603      	mov	r3, r0
 8000714:	fa04 f203 	lsl.w	r2, r4, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	431a      	orrs	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e057      	b.n	80007d4 <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <MCAL_GPIO_Init+0xac>
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	789b      	ldrb	r3, [r3, #2]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d115      	bne.n	8000760 <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	789b      	ldrb	r3, [r3, #2]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000742:	7afc      	ldrb	r4, [r7, #11]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff3a 	bl	80005c2 <Get_CRLH_Position>
 800074e:	4603      	mov	r3, r0
 8000750:	fa04 f203 	lsl.w	r2, r4, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	431a      	orrs	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e039      	b.n	80007d4 <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	789b      	ldrb	r3, [r3, #2]
 8000764:	2b08      	cmp	r3, #8
 8000766:	d110      	bne.n	800078a <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 8000768:	2304      	movs	r3, #4
 800076a:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800076c:	7afc      	ldrb	r4, [r7, #11]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff25 	bl	80005c2 <Get_CRLH_Position>
 8000778:	4603      	mov	r3, r0
 800077a:	fa04 f203 	lsl.w	r2, r4, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000788:	e024      	b.n	80007d4 <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 800078a:	2308      	movs	r3, #8
 800078c:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800078e:	7afc      	ldrb	r4, [r7, #11]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff14 	bl	80005c2 <Get_CRLH_Position>
 800079a:	4603      	mov	r3, r0
 800079c:	fa04 f203 	lsl.w	r2, r4, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	431a      	orrs	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	789b      	ldrb	r3, [r3, #2]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d107      	bne.n	80007c2 <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	8812      	ldrh	r2, [r2, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
}
 80007c0:	e008      	b.n	80007d4 <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	8812      	ldrh	r2, [r2, #0]
 80007ca:	43d2      	mvns	r2, r2
 80007cc:	401a      	ands	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60da      	str	r2, [r3, #12]
}
 80007d2:	e7ff      	b.n	80007d4 <MCAL_GPIO_Init+0x14c>
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}

080007dc <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32_t)(Value);
 80007e8:	887a      	ldrh	r2, [r7, #2]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60da      	str	r2, [r3, #12]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <MCAL_GPIO_WritePin>:
 *
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin	(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	807b      	strh	r3, [r7, #2]
 8000804:	4613      	mov	r3, r2
 8000806:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 8000808:	787b      	ldrb	r3, [r7, #1]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d003      	beq.n	8000816 <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 800080e:	887a      	ldrh	r2, [r7, #2]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	611a      	str	r2, [r3, #16]

//		or
//		GPIOx->ODR &= ~(PinNumber) ;
	}

}
 8000814:	e002      	b.n	800081c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000816:	887a      	ldrh	r2, [r7, #2]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	615a      	str	r2, [r3, #20]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
	...

08000828 <Enable_NVIC>:
 * 							Generic Functions
 * =======================================================================================
 */

void Enable_NVIC (uint16_t IRQ)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d854      	bhi.n	80008e2 <Enable_NVIC+0xba>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <Enable_NVIC+0x18>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000881 	.word	0x08000881
 8000844:	0800088f 	.word	0x0800088f
 8000848:	0800089d 	.word	0x0800089d
 800084c:	080008ab 	.word	0x080008ab
 8000850:	080008b9 	.word	0x080008b9
 8000854:	080008c7 	.word	0x080008c7
 8000858:	080008c7 	.word	0x080008c7
 800085c:	080008c7 	.word	0x080008c7
 8000860:	080008c7 	.word	0x080008c7
 8000864:	080008c7 	.word	0x080008c7
 8000868:	080008d5 	.word	0x080008d5
 800086c:	080008d5 	.word	0x080008d5
 8000870:	080008d5 	.word	0x080008d5
 8000874:	080008d5 	.word	0x080008d5
 8000878:	080008d5 	.word	0x080008d5
 800087c:	080008d5 	.word	0x080008d5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable ;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <Enable_NVIC+0xc4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <Enable_NVIC+0xc4>)
 8000886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088a:	6013      	str	r3, [r2, #0]
		break;
 800088c:	e029      	b.n	80008e2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable ;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <Enable_NVIC+0xc4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <Enable_NVIC+0xc4>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6013      	str	r3, [r2, #0]
		break ;
 800089a:	e022      	b.n	80008e2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable ;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <Enable_NVIC+0xc4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <Enable_NVIC+0xc4>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
		break ;
 80008a8:	e01b      	b.n	80008e2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable ;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <Enable_NVIC+0xc4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <Enable_NVIC+0xc4>)
 80008b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b4:	6013      	str	r3, [r2, #0]
		break ;
 80008b6:	e014      	b.n	80008e2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable ;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <Enable_NVIC+0xc4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <Enable_NVIC+0xc4>)
 80008be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c2:	6013      	str	r3, [r2, #0]
		break ;
 80008c4:	e00d      	b.n	80008e2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <Enable_NVIC+0xc4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <Enable_NVIC+0xc4>)
 80008cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008d0:	6013      	str	r3, [r2, #0]
		break ;
 80008d2:	e006      	b.n	80008e2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <Enable_NVIC+0xc8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <Enable_NVIC+0xc8>)
 80008da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008de:	6013      	str	r3, [r2, #0]
		break ;
 80008e0:	bf00      	nop

	}
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000e104 	.word	0xe000e104

080008f4 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d854      	bhi.n	80009ae <Disable_NVIC+0xba>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <Disable_NVIC+0x18>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	0800094d 	.word	0x0800094d
 8000910:	0800095b 	.word	0x0800095b
 8000914:	08000969 	.word	0x08000969
 8000918:	08000977 	.word	0x08000977
 800091c:	08000985 	.word	0x08000985
 8000920:	08000993 	.word	0x08000993
 8000924:	08000993 	.word	0x08000993
 8000928:	08000993 	.word	0x08000993
 800092c:	08000993 	.word	0x08000993
 8000930:	08000993 	.word	0x08000993
 8000934:	080009a1 	.word	0x080009a1
 8000938:	080009a1 	.word	0x080009a1
 800093c:	080009a1 	.word	0x080009a1
 8000940:	080009a1 	.word	0x080009a1
 8000944:	080009a1 	.word	0x080009a1
 8000948:	080009a1 	.word	0x080009a1
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable ;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <Disable_NVIC+0xc4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <Disable_NVIC+0xc4>)
 8000952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000956:	6013      	str	r3, [r2, #0]
			break;
 8000958:	e029      	b.n	80009ae <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable ;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <Disable_NVIC+0xc4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <Disable_NVIC+0xc4>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6013      	str	r3, [r2, #0]
			break ;
 8000966:	e022      	b.n	80009ae <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable ;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <Disable_NVIC+0xc4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <Disable_NVIC+0xc4>)
 800096e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000972:	6013      	str	r3, [r2, #0]
			break ;
 8000974:	e01b      	b.n	80009ae <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable ;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <Disable_NVIC+0xc4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <Disable_NVIC+0xc4>)
 800097c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000980:	6013      	str	r3, [r2, #0]
			break ;
 8000982:	e014      	b.n	80009ae <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable ;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <Disable_NVIC+0xc4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <Disable_NVIC+0xc4>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098e:	6013      	str	r3, [r2, #0]
			break ;
 8000990:	e00d      	b.n	80009ae <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <Disable_NVIC+0xc4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <Disable_NVIC+0xc4>)
 8000998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800099c:	6013      	str	r3, [r2, #0]
			break ;
 800099e:	e006      	b.n	80009ae <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <Disable_NVIC+0xc8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <Disable_NVIC+0xc8>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	6013      	str	r3, [r2, #0]
			break ;
 80009ac:	bf00      	nop

		}

}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	e000e180 	.word	0xe000e180
 80009bc:	e000e184 	.word	0xe000e184

080009c0 <Update_EXTI>:




void Update_EXTI (EXTI_PinConfig_t* EXTI_Config)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF Input -> Floating INPUT

	GPIO_PinConfig_t PinCfg ;
	//Update the GPIO Pin To Be Floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	891b      	ldrh	r3, [r3, #8]
 80009cc:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009ce:	2301      	movs	r3, #1
 80009d0:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port , &PinCfg);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f107 0208 	add.w	r2, r7, #8
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe53 	bl	8000688 <MCAL_GPIO_Init>
	//==============================================

	//2- UPDATE AFIO to Route between EXTI Line with PORT A,B,C,D

	uint8_t  AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.ETI_InputLineNumber / 4 ;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	73fb      	strb	r3, [r7, #15]

	uint8_t	AFIO_EXTICR_Postion = (EXTI_Config->EXTI_PIN.ETI_InputLineNumber % 4) * 4 ;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index ] &= ~(0xF <<AFIO_EXTICR_Postion );
 80009fc:	4a5f      	ldr	r2, [pc, #380]	; (8000b7c <Update_EXTI+0x1bc>)
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3302      	adds	r3, #2
 8000a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	210f      	movs	r1, #15
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	495a      	ldr	r1, [pc, #360]	; (8000b7c <Update_EXTI+0x1bc>)
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4002      	ands	r2, r0
 8000a18:	3302      	adds	r3, #2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index ] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_Postion);
 8000a1e:	4a57      	ldr	r2, [pc, #348]	; (8000b7c <Update_EXTI+0x1bc>)
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4954      	ldr	r1, [pc, #336]	; (8000b80 <Update_EXTI+0x1c0>)
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d016      	beq.n	8000a60 <Update_EXTI+0xa0>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4953      	ldr	r1, [pc, #332]	; (8000b84 <Update_EXTI+0x1c4>)
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d00f      	beq.n	8000a5c <Update_EXTI+0x9c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4951      	ldr	r1, [pc, #324]	; (8000b88 <Update_EXTI+0x1c8>)
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d008      	beq.n	8000a58 <Update_EXTI+0x98>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4950      	ldr	r1, [pc, #320]	; (8000b8c <Update_EXTI+0x1cc>)
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d101      	bne.n	8000a54 <Update_EXTI+0x94>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e006      	b.n	8000a62 <Update_EXTI+0xa2>
 8000a54:	2300      	movs	r3, #0
 8000a56:	e004      	b.n	8000a62 <Update_EXTI+0xa2>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <Update_EXTI+0xa2>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <Update_EXTI+0xa2>
 8000a60:	2300      	movs	r3, #0
 8000a62:	7bb9      	ldrb	r1, [r7, #14]
 8000a64:	408b      	lsls	r3, r1
 8000a66:	4618      	mov	r0, r3
 8000a68:	4944      	ldr	r1, [pc, #272]	; (8000b7c <Update_EXTI+0x1bc>)
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	4302      	orrs	r2, r0
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==============================================

	//3- Update Rising or falling Register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000a74:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <Update_EXTI+0x1d0>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	8812      	ldrh	r2, [r2, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	408a      	lsls	r2, r1
 8000a82:	43d2      	mvns	r2, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <Update_EXTI+0x1d0>)
 8000a88:	400b      	ands	r3, r1
 8000a8a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <Update_EXTI+0x1d0>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	8812      	ldrh	r2, [r2, #0]
 8000a94:	4611      	mov	r1, r2
 8000a96:	2201      	movs	r2, #1
 8000a98:	408a      	lsls	r2, r1
 8000a9a:	43d2      	mvns	r2, r2
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <Update_EXTI+0x1d0>)
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7b1b      	ldrb	r3, [r3, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10b      	bne.n	8000ac4 <Update_EXTI+0x104>
	{
		EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000aac:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <Update_EXTI+0x1d0>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	408a      	lsls	r2, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <Update_EXTI+0x1d0>)
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6093      	str	r3, [r2, #8]
 8000ac2:	e029      	b.n	8000b18 <Update_EXTI+0x158>

	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7b1b      	ldrb	r3, [r3, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10b      	bne.n	8000ae4 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000acc:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <Update_EXTI+0x1d0>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	8812      	ldrh	r2, [r2, #0]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	408a      	lsls	r2, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <Update_EXTI+0x1d0>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	60d3      	str	r3, [r2, #12]
 8000ae2:	e019      	b.n	8000b18 <Update_EXTI+0x158>


	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7b1b      	ldrb	r3, [r3, #12]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d115      	bne.n	8000b18 <Update_EXTI+0x158>
	{
		EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <Update_EXTI+0x1d0>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	8812      	ldrh	r2, [r2, #0]
 8000af4:	4611      	mov	r1, r2
 8000af6:	2201      	movs	r2, #1
 8000af8:	408a      	lsls	r2, r1
 8000afa:	4611      	mov	r1, r2
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <Update_EXTI+0x1d0>)
 8000afe:	430b      	orrs	r3, r1
 8000b00:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <Update_EXTI+0x1d0>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	8812      	ldrh	r2, [r2, #0]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	408a      	lsls	r2, r1
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <Update_EXTI+0x1d0>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	60d3      	str	r3, [r2, #12]
	}

	//==============================================
	//4- Update IRQ Handling CALLBACK

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.ETI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <Update_EXTI+0x1d4>)
 8000b24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==============================================
	//5- Enable/Disable IRQ EXTI & NVIC

	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable )
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7b5b      	ldrb	r3, [r3, #13]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d110      	bne.n	8000b52 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <Update_EXTI+0x1d0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	8812      	ldrh	r2, [r2, #0]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	408a      	lsls	r2, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <Update_EXTI+0x1d0>)
 8000b42:	430b      	orrs	r3, r1
 8000b44:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber ) ;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe6c 	bl	8000828 <Enable_NVIC>
	}else
	{
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
		Disable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
	}
}
 8000b50:	e010      	b.n	8000b74 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <Update_EXTI+0x1d0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	8812      	ldrh	r2, [r2, #0]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	408a      	lsls	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	4611      	mov	r1, r2
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <Update_EXTI+0x1d0>)
 8000b66:	400b      	ands	r3, r1
 8000b68:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fec0 	bl	80008f4 <Disable_NVIC>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	40011000 	.word	0x40011000
 8000b8c:	40011400 	.word	0x40011400
 8000b90:	40010400 	.word	0x40010400
 8000b94:	20000028 	.word	0x20000028

08000b98 <MCAL_EXTI_GPIO_Init>:
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config) ;
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff0d 	bl	80009c0 <Update_EXTI>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <EXTI0_IRQHandler+0x1c>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <EXTI0_IRQHandler+0x1c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <EXTI0_IRQHandler+0x20>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4798      	blx	r3
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010400 	.word	0x40010400
 8000bd0:	20000028 	.word	0x20000028

08000bd4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <EXTI1_IRQHandler+0x1c>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <EXTI1_IRQHandler+0x1c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <EXTI1_IRQHandler+0x20>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4798      	blx	r3
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40010400 	.word	0x40010400
 8000bf4:	20000028 	.word	0x20000028

08000bf8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <EXTI2_IRQHandler+0x1c>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <EXTI2_IRQHandler+0x1c>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <EXTI2_IRQHandler+0x20>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4798      	blx	r3
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010400 	.word	0x40010400
 8000c18:	20000028 	.word	0x20000028

08000c1c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <EXTI3_IRQHandler+0x1c>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <EXTI3_IRQHandler+0x1c>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <EXTI3_IRQHandler+0x20>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4798      	blx	r3
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010400 	.word	0x40010400
 8000c3c:	20000028 	.word	0x20000028

08000c40 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <EXTI4_IRQHandler+0x1c>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <EXTI4_IRQHandler+0x1c>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <EXTI4_IRQHandler+0x20>)
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	4798      	blx	r3
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	20000028 	.word	0x20000028

08000c64 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d008      	beq.n	8000c86 <EXTI9_5_IRQHandler+0x22>
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	6153      	str	r3, [r2, #20]
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <EXTI9_5_IRQHandler+0xa4>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <EXTI9_5_IRQHandler+0x40>
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <EXTI9_5_IRQHandler+0xa4>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d008      	beq.n	8000cc2 <EXTI9_5_IRQHandler+0x5e>
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cba:	6153      	str	r3, [r2, #20]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <EXTI9_5_IRQHandler+0xa4>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d008      	beq.n	8000ce0 <EXTI9_5_IRQHandler+0x7c>
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <EXTI9_5_IRQHandler+0xa4>)
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d008      	beq.n	8000cfe <EXTI9_5_IRQHandler+0x9a>
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <EXTI9_5_IRQHandler+0xa0>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6153      	str	r3, [r2, #20]
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <EXTI9_5_IRQHandler+0xa4>)
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	4798      	blx	r3

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010400 	.word	0x40010400
 8000d08:	20000028 	.word	0x20000028

08000d0c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <EXTI15_10_IRQHandler+0x22>
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6153      	str	r3, [r2, #20]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <EXTI15_10_IRQHandler+0xc0>)
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <EXTI15_10_IRQHandler+0x40>
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <EXTI15_10_IRQHandler+0xc0>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <EXTI15_10_IRQHandler+0x5e>
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d62:	6153      	str	r3, [r2, #20]
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <EXTI15_10_IRQHandler+0xc0>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <EXTI15_10_IRQHandler+0x7c>
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <EXTI15_10_IRQHandler+0xc0>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <EXTI15_10_IRQHandler+0x9a>
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9e:	6153      	str	r3, [r2, #20]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <EXTI15_10_IRQHandler+0xc0>)
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d008      	beq.n	8000dc4 <EXTI15_10_IRQHandler+0xb8>
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <EXTI15_10_IRQHandler+0xbc>)
 8000db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <EXTI15_10_IRQHandler+0xc0>)
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc2:	4798      	blx	r3

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010400 	.word	0x40010400
 8000dcc:	20000028 	.word	0x20000028

08000dd0 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <USART1_IRQHandler+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	4798      	blx	r3

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000020 	.word	0x20000020

08000de4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4798      	blx	r3

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000020 	.word	0x20000020

08000df8 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <USART3_IRQHandler+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	4798      	blx	r3


}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000020 	.word	0x20000020

08000e0c <__libc_init_array>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	2500      	movs	r5, #0
 8000e10:	4e0c      	ldr	r6, [pc, #48]	; (8000e44 <__libc_init_array+0x38>)
 8000e12:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <__libc_init_array+0x3c>)
 8000e14:	1ba4      	subs	r4, r4, r6
 8000e16:	10a4      	asrs	r4, r4, #2
 8000e18:	42a5      	cmp	r5, r4
 8000e1a:	d109      	bne.n	8000e30 <__libc_init_array+0x24>
 8000e1c:	f000 f81a 	bl	8000e54 <_init>
 8000e20:	2500      	movs	r5, #0
 8000e22:	4e0a      	ldr	r6, [pc, #40]	; (8000e4c <__libc_init_array+0x40>)
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <__libc_init_array+0x44>)
 8000e26:	1ba4      	subs	r4, r4, r6
 8000e28:	10a4      	asrs	r4, r4, #2
 8000e2a:	42a5      	cmp	r5, r4
 8000e2c:	d105      	bne.n	8000e3a <__libc_init_array+0x2e>
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e34:	4798      	blx	r3
 8000e36:	3501      	adds	r5, #1
 8000e38:	e7ee      	b.n	8000e18 <__libc_init_array+0xc>
 8000e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e3e:	4798      	blx	r3
 8000e40:	3501      	adds	r5, #1
 8000e42:	e7f2      	b.n	8000e2a <__libc_init_array+0x1e>
 8000e44:	08000e90 	.word	0x08000e90
 8000e48:	08000e90 	.word	0x08000e90
 8000e4c:	08000e90 	.word	0x08000e90
 8000e50:	08000e94 	.word	0x08000e94

08000e54 <_init>:
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e56:	bf00      	nop
 8000e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5a:	bc08      	pop	{r3}
 8000e5c:	469e      	mov	lr, r3
 8000e5e:	4770      	bx	lr

08000e60 <_fini>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	bf00      	nop
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr
