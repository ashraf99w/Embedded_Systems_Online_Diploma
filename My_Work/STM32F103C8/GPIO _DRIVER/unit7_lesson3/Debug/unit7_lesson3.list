
unit7_lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000670  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a0  080007a8  000107a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a0  080007a0  000107a8  2**0
                  CONTENTS
  4 .ARM          00000000  080007a0  080007a0  000107a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a0  080007a8  000107a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a0  080007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a4  080007a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  080007a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080007a8  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fb4  00000000  00000000  000107d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000846  00000000  00000000  00013785  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00013fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00014158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002331  00000000  00000000  00014298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a60  00000000  00000000  000165c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009d37  00000000  00000000  00018029  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00021d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004d0  00000000  00000000  00021ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000788 	.word	0x08000788

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000788 	.word	0x08000788

08000170 <main>:

#include"stm32f103x8_gpio_driver.h"


int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	//ENABLE PORT A,B CLOCK
	RCC_GPIOA_CLK_EN();
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <main+0xa8>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a27      	ldr	r2, [pc, #156]	; (8000218 <main+0xa8>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <main+0xa8>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a24      	ldr	r2, [pc, #144]	; (8000218 <main+0xa8>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]

	GPIO_PinConfig_t PinCFG;

	//PA1 INPUT HighZ
	PinCFG.GPIO_PinNumber=GPIO_PIN_1;
 800018e:	2302      	movs	r3, #2
 8000190:	80bb      	strh	r3, [r7, #4]
	PinCFG.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000192:	2301      	movs	r3, #1
 8000194:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4820      	ldr	r0, [pc, #128]	; (800021c <main+0xac>)
 800019c:	f000 f9fd 	bl	800059a <MCAL_GPIO_Init>

	//PA13 INPUT HighZ
	PinCFG.GPIO_PinNumber=GPIO_PIN_13;
 80001a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001a4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCFG);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	481c      	ldr	r0, [pc, #112]	; (800021c <main+0xac>)
 80001ac:	f000 f9f5 	bl	800059a <MCAL_GPIO_Init>

	//PB1 output push-pull mode
	PinCFG.GPIO_PinNumber=GPIO_PIN_1;
 80001b0:	2302      	movs	r3, #2
 80001b2:	80bb      	strh	r3, [r7, #4]
	PinCFG.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	71bb      	strb	r3, [r7, #6]
	PinCFG.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCFG);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	4817      	ldr	r0, [pc, #92]	; (8000220 <main+0xb0>)
 80001c2:	f000 f9ea 	bl	800059a <MCAL_GPIO_Init>

	//PB13 output push-pull mode
	PinCFG.GPIO_PinNumber=GPIO_PIN_13;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCFG);
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	4619      	mov	r1, r3
 80001d0:	4813      	ldr	r0, [pc, #76]	; (8000220 <main+0xb0>)
 80001d2:	f000 f9e2 	bl	800059a <MCAL_GPIO_Init>

   while(1)
   {
	   if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)//pressed
 80001d6:	2102      	movs	r1, #2
 80001d8:	4810      	ldr	r0, [pc, #64]	; (800021c <main+0xac>)
 80001da:	f000 fa88 	bl	80006ee <MCAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d10b      	bne.n	80001fc <main+0x8c>
	   {
		   MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80001e4:	2102      	movs	r1, #2
 80001e6:	480e      	ldr	r0, [pc, #56]	; (8000220 <main+0xb0>)
 80001e8:	f000 fa98 	bl	800071c <MCAL_GPIO_TogglePin>
		   while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0);//single press
 80001ec:	bf00      	nop
 80001ee:	2102      	movs	r1, #2
 80001f0:	480a      	ldr	r0, [pc, #40]	; (800021c <main+0xac>)
 80001f2:	f000 fa7c 	bl	80006ee <MCAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0f8      	beq.n	80001ee <main+0x7e>
	   }

	   if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==1)//pressed
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	4806      	ldr	r0, [pc, #24]	; (800021c <main+0xac>)
 8000202:	f000 fa74 	bl	80006ee <MCAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	2b01      	cmp	r3, #1
 800020a:	d1e4      	bne.n	80001d6 <main+0x66>
	  	   {
	  		   MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);//multi press
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <main+0xb0>)
 8000212:	f000 fa83 	bl	800071c <MCAL_GPIO_TogglePin>
	   if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)//pressed
 8000216:	e7de      	b.n	80001d6 <main+0x66>
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	40010c00 	.word	0x40010c00

08000224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000226:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000228:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800022c:	480c      	ldr	r0, [pc, #48]	; (8000260 <LoopForever+0x6>)
  ldr r1, =_edata
 800022e:	490d      	ldr	r1, [pc, #52]	; (8000264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <LoopForever+0xe>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000234:	e002      	b.n	800023c <LoopCopyDataInit>

08000236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023a:	3304      	adds	r3, #4

0800023c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800023c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000240:	d3f9      	bcc.n	8000236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000244:	4c0a      	ldr	r4, [pc, #40]	; (8000270 <LoopForever+0x16>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000248:	e001      	b.n	800024e <LoopFillZerobss>

0800024a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800024c:	3204      	adds	r2, #4

0800024e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000250:	d3fb      	bcc.n	800024a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000252:	f000 fa75 	bl	8000740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000256:	f7ff ff8b 	bl	8000170 <main>

0800025a <LoopForever>:

LoopForever:
    b LoopForever
 800025a:	e7fe      	b.n	800025a <LoopForever>
  ldr   r0, =_estack
 800025c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000264:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000268:	080007a8 	.word	0x080007a8
  ldr r2, =_sbss
 800026c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000270:	2000005c 	.word	0x2000005c

08000274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000274:	e7fe      	b.n	8000274 <ADC1_2_IRQHandler>
	...

08000278 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI0_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI0_IRQHandler+0x1c>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI0_IRQHandler+0x20>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000020 	.word	0x20000020

0800029c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI1_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI1_IRQHandler+0x1c>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI1_IRQHandler+0x20>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4798      	blx	r3
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000020 	.word	0x20000020

080002c0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI2_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI2_IRQHandler+0x1c>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI2_IRQHandler+0x20>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4798      	blx	r3
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000020 	.word	0x20000020

080002e4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI3_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI3_IRQHandler+0x1c>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI3_IRQHandler+0x20>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4798      	blx	r3
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	20000020 	.word	0x20000020

08000308 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <EXTI4_IRQHandler+0x1c>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <EXTI4_IRQHandler+0x1c>)
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI4_IRQHandler+0x20>)
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	4798      	blx	r3
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010400 	.word	0x40010400
 8000328:	20000020 	.word	0x20000020

0800032c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	f003 0320 	and.w	r3, r3, #32
 8000338:	2b00      	cmp	r3, #0
 800033a:	d008      	beq.n	800034e <EXTI9_5_IRQHandler+0x22>
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6153      	str	r3, [r2, #20]
 8000348:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <EXTI9_5_IRQHandler+0xa4>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000356:	2b00      	cmp	r3, #0
 8000358:	d008      	beq.n	800036c <EXTI9_5_IRQHandler+0x40>
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 8000360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <EXTI9_5_IRQHandler+0xa4>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d008      	beq.n	800038a <EXTI9_5_IRQHandler+0x5e>
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800037e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000382:	6153      	str	r3, [r2, #20]
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <EXTI9_5_IRQHandler+0xa4>)
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000392:	2b00      	cmp	r3, #0
 8000394:	d008      	beq.n	80003a8 <EXTI9_5_IRQHandler+0x7c>
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 800039c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <EXTI9_5_IRQHandler+0xa4>)
 80003a4:	6a1b      	ldr	r3, [r3, #32]
 80003a6:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d008      	beq.n	80003c6 <EXTI9_5_IRQHandler+0x9a>
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI9_5_IRQHandler+0xa0>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6153      	str	r3, [r2, #20]
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI9_5_IRQHandler+0xa4>)
 80003c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c4:	4798      	blx	r3

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000020 	.word	0x20000020

080003d4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <EXTI15_10_IRQHandler+0x22>
 80003e4:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a29      	ldr	r2, [pc, #164]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 80003ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ee:	6153      	str	r3, [r2, #20]
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <EXTI15_10_IRQHandler+0xc0>)
 80003f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f4:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <EXTI15_10_IRQHandler+0x40>
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a22      	ldr	r2, [pc, #136]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b21      	ldr	r3, [pc, #132]	; (8000494 <EXTI15_10_IRQHandler+0xc0>)
 8000410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000412:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d008      	beq.n	8000432 <EXTI15_10_IRQHandler+0x5e>
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800042a:	6153      	str	r3, [r2, #20]
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <EXTI15_10_IRQHandler+0xc0>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800043a:	2b00      	cmp	r3, #0
 800043c:	d008      	beq.n	8000450 <EXTI15_10_IRQHandler+0x7c>
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a13      	ldr	r2, [pc, #76]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <EXTI15_10_IRQHandler+0xc0>)
 800044c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800044e:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d008      	beq.n	800046e <EXTI15_10_IRQHandler+0x9a>
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000466:	6153      	str	r3, [r2, #20]
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <EXTI15_10_IRQHandler+0xc0>)
 800046a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800046c:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d008      	beq.n	800048c <EXTI15_10_IRQHandler+0xb8>
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <EXTI15_10_IRQHandler+0xbc>)
 8000480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b03      	ldr	r3, [pc, #12]	; (8000494 <EXTI15_10_IRQHandler+0xc0>)
 8000488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800048a:	4798      	blx	r3

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010400 	.word	0x40010400
 8000494:	20000020 	.word	0x20000020

08000498 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 800049c:	4b02      	ldr	r3, [pc, #8]	; (80004a8 <USART1_IRQHandler+0x10>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	4798      	blx	r3

}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000001c 	.word	0x2000001c

080004ac <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 80004b0:	4b02      	ldr	r3, [pc, #8]	; (80004bc <USART2_IRQHandler+0x10>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	691b      	ldr	r3, [r3, #16]
 80004b6:	4798      	blx	r3

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	2000001c 	.word	0x2000001c

080004c0 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 80004c4:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <USART3_IRQHandler+0x10>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	691b      	ldr	r3, [r3, #16]
 80004ca:	4798      	blx	r3


}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000001c 	.word	0x2000001c

080004d4 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	2b80      	cmp	r3, #128	; 0x80
 80004e2:	d042      	beq.n	800056a <Get_CRLH_Position+0x96>
 80004e4:	2b80      	cmp	r3, #128	; 0x80
 80004e6:	dc11      	bgt.n	800050c <Get_CRLH_Position+0x38>
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	d036      	beq.n	800055a <Get_CRLH_Position+0x86>
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	dc06      	bgt.n	80004fe <Get_CRLH_Position+0x2a>
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d02e      	beq.n	8000552 <Get_CRLH_Position+0x7e>
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d02e      	beq.n	8000556 <Get_CRLH_Position+0x82>
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d028      	beq.n	800054e <Get_CRLH_Position+0x7a>
 80004fc:	e047      	b.n	800058e <Get_CRLH_Position+0xba>
 80004fe:	2b20      	cmp	r3, #32
 8000500:	d02f      	beq.n	8000562 <Get_CRLH_Position+0x8e>
 8000502:	2b40      	cmp	r3, #64	; 0x40
 8000504:	d02f      	beq.n	8000566 <Get_CRLH_Position+0x92>
 8000506:	2b10      	cmp	r3, #16
 8000508:	d029      	beq.n	800055e <Get_CRLH_Position+0x8a>
 800050a:	e040      	b.n	800058e <Get_CRLH_Position+0xba>
 800050c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000510:	d033      	beq.n	800057a <Get_CRLH_Position+0xa6>
 8000512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000516:	dc09      	bgt.n	800052c <Get_CRLH_Position+0x58>
 8000518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800051c:	d029      	beq.n	8000572 <Get_CRLH_Position+0x9e>
 800051e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000522:	d028      	beq.n	8000576 <Get_CRLH_Position+0xa2>
 8000524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000528:	d021      	beq.n	800056e <Get_CRLH_Position+0x9a>
 800052a:	e030      	b.n	800058e <Get_CRLH_Position+0xba>
 800052c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000530:	d027      	beq.n	8000582 <Get_CRLH_Position+0xae>
 8000532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000536:	dc03      	bgt.n	8000540 <Get_CRLH_Position+0x6c>
 8000538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800053c:	d01f      	beq.n	800057e <Get_CRLH_Position+0xaa>
 800053e:	e026      	b.n	800058e <Get_CRLH_Position+0xba>
 8000540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000544:	d01f      	beq.n	8000586 <Get_CRLH_Position+0xb2>
 8000546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800054a:	d01e      	beq.n	800058a <Get_CRLH_Position+0xb6>
 800054c:	e01f      	b.n	800058e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800054e:	2300      	movs	r3, #0
 8000550:	e01e      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000552:	2304      	movs	r3, #4
 8000554:	e01c      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000556:	2308      	movs	r3, #8
 8000558:	e01a      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800055a:	230c      	movs	r3, #12
 800055c:	e018      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800055e:	2310      	movs	r3, #16
 8000560:	e016      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000562:	2314      	movs	r3, #20
 8000564:	e014      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000566:	2318      	movs	r3, #24
 8000568:	e012      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800056a:	231c      	movs	r3, #28
 800056c:	e010      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 800056e:	2300      	movs	r3, #0
 8000570:	e00e      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000572:	2304      	movs	r3, #4
 8000574:	e00c      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000576:	2308      	movs	r3, #8
 8000578:	e00a      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 800057a:	230c      	movs	r3, #12
 800057c:	e008      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800057e:	2310      	movs	r3, #16
 8000580:	e006      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000582:	2314      	movs	r3, #20
 8000584:	e004      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000586:	2318      	movs	r3, #24
 8000588:	e002      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 800058a:	231c      	movs	r3, #28
 800058c:	e000      	b.n	8000590 <Get_CRLH_Position+0xbc>
		break ;


	}
return 0 ;
 800058e:	2300      	movs	r3, #0

}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 80005a8:	2300      	movs	r3, #0
 80005aa:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	2bff      	cmp	r3, #255	; 0xff
 80005b2:	d801      	bhi.n	80005b8 <MCAL_GPIO_Init+0x1e>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	e001      	b.n	80005bc <MCAL_GPIO_Init+0x22>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3304      	adds	r3, #4
 80005bc:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff86 	bl	80004d4 <Get_CRLH_Position>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	230f      	movs	r3, #15
 80005ce:	4093      	lsls	r3, r2
 80005d0:	43da      	mvns	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	401a      	ands	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) ||
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	789b      	ldrb	r3, [r3, #2]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d00b      	beq.n	80005fc <MCAL_GPIO_Init+0x62>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	d007      	beq.n	80005fc <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	789b      	ldrb	r3, [r3, #2]
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) ||
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d003      	beq.n	80005fc <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d11c      	bne.n	8000636 <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	3b04      	subs	r3, #4
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	b25a      	sxtb	r2, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	b25b      	sxtb	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b25b      	sxtb	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000618:	7afc      	ldrb	r4, [r7, #11]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff58 	bl	80004d4 <Get_CRLH_Position>
 8000624:	4603      	mov	r3, r0
 8000626:	fa04 f203 	lsl.w	r2, r4, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	431a      	orrs	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e057      	b.n	80006e6 <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <MCAL_GPIO_Init+0xac>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d115      	bne.n	8000672 <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000654:	7afc      	ldrb	r4, [r7, #11]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff3a 	bl	80004d4 <Get_CRLH_Position>
 8000660:	4603      	mov	r3, r0
 8000662:	fa04 f203 	lsl.w	r2, r4, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	431a      	orrs	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	e039      	b.n	80006e6 <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	2b08      	cmp	r3, #8
 8000678:	d110      	bne.n	800069c <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 800067a:	2304      	movs	r3, #4
 800067c:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800067e:	7afc      	ldrb	r4, [r7, #11]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff25 	bl	80004d4 <Get_CRLH_Position>
 800068a:	4603      	mov	r3, r0
 800068c:	fa04 f203 	lsl.w	r2, r4, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	431a      	orrs	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 800069a:	e024      	b.n	80006e6 <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 800069c:	2308      	movs	r3, #8
 800069e:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80006a0:	7afc      	ldrb	r4, [r7, #11]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff14 	bl	80004d4 <Get_CRLH_Position>
 80006ac:	4603      	mov	r3, r0
 80006ae:	fa04 f203 	lsl.w	r2, r4, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	431a      	orrs	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d107      	bne.n	80006d4 <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	431a      	orrs	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	60da      	str	r2, [r3, #12]
}
 80006d2:	e008      	b.n	80006e6 <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	8812      	ldrh	r2, [r2, #0]
 80006dc:	43d2      	mvns	r2, r2
 80006de:	401a      	ands	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60da      	str	r2, [r3, #12]
}
 80006e4:	e7ff      	b.n	80006e6 <MCAL_GPIO_Init+0x14c>
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd90      	pop	{r4, r7, pc}

080006ee <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-The input port pin value.
 * Note					-none
 */
uint8_t  MCAL_GPIO_ReadPin		(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if ((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	4013      	ands	r3, r2
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e001      	b.n	8000710 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus = GPIO_PIN_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <MCAL_GPIO_TogglePin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_TogglePin		(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	405a      	eors	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60da      	str	r2, [r3, #12]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <__libc_init_array>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	2500      	movs	r5, #0
 8000744:	4e0c      	ldr	r6, [pc, #48]	; (8000778 <__libc_init_array+0x38>)
 8000746:	4c0d      	ldr	r4, [pc, #52]	; (800077c <__libc_init_array+0x3c>)
 8000748:	1ba4      	subs	r4, r4, r6
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	42a5      	cmp	r5, r4
 800074e:	d109      	bne.n	8000764 <__libc_init_array+0x24>
 8000750:	f000 f81a 	bl	8000788 <_init>
 8000754:	2500      	movs	r5, #0
 8000756:	4e0a      	ldr	r6, [pc, #40]	; (8000780 <__libc_init_array+0x40>)
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <__libc_init_array+0x44>)
 800075a:	1ba4      	subs	r4, r4, r6
 800075c:	10a4      	asrs	r4, r4, #2
 800075e:	42a5      	cmp	r5, r4
 8000760:	d105      	bne.n	800076e <__libc_init_array+0x2e>
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000768:	4798      	blx	r3
 800076a:	3501      	adds	r5, #1
 800076c:	e7ee      	b.n	800074c <__libc_init_array+0xc>
 800076e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000772:	4798      	blx	r3
 8000774:	3501      	adds	r5, #1
 8000776:	e7f2      	b.n	800075e <__libc_init_array+0x1e>
 8000778:	080007a0 	.word	0x080007a0
 800077c:	080007a0 	.word	0x080007a0
 8000780:	080007a0 	.word	0x080007a0
 8000784:	080007a4 	.word	0x080007a4

08000788 <_init>:
 8000788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078a:	bf00      	nop
 800078c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078e:	bc08      	pop	{r3}
 8000790:	469e      	mov	lr, r3
 8000792:	4770      	bx	lr

08000794 <_fini>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	bf00      	nop
 8000798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079a:	bc08      	pop	{r3}
 800079c:	469e      	mov	lr, r3
 800079e:	4770      	bx	lr
