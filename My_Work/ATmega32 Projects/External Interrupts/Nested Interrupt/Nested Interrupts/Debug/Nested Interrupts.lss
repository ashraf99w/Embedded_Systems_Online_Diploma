
Nested Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000630  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec0  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e4  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000097a  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00002820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f9  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d30  00000000  00000000  00002fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
   4:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_1>
   8:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_2>
   c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_3>
  10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  54:	ee 00       	.word	0x00ee	; ????
  56:	07 01       	movw	r0, r14
  58:	20 01       	movw	r4, r0
  5a:	39 01       	movw	r6, r18
  5c:	51 01       	movw	r10, r2
  5e:	51 01       	movw	r10, r2
  60:	51 01       	movw	r10, r2
  62:	51 01       	movw	r10, r2
  64:	51 01       	movw	r10, r2
  66:	51 01       	movw	r10, r2
  68:	51 01       	movw	r10, r2
  6a:	51 01       	movw	r10, r2
  6c:	51 01       	movw	r10, r2
  6e:	51 01       	movw	r10, r2
  70:	51 01       	movw	r10, r2
  72:	51 01       	movw	r10, r2
  74:	51 01       	movw	r10, r2
  76:	51 01       	movw	r10, r2
  78:	51 01       	movw	r10, r2
  7a:	51 01       	movw	r10, r2
  7c:	51 01       	movw	r10, r2
  7e:	51 01       	movw	r10, r2
  80:	51 01       	movw	r10, r2
  82:	51 01       	movw	r10, r2
  84:	51 01       	movw	r10, r2
  86:	51 01       	movw	r10, r2
  88:	51 01       	movw	r10, r2
  8a:	51 01       	movw	r10, r2
  8c:	51 01       	movw	r10, r2
  8e:	51 01       	movw	r10, r2
  90:	51 01       	movw	r10, r2
  92:	51 01       	movw	r10, r2
  94:	ee 00       	.word	0x00ee	; ????
  96:	07 01       	movw	r0, r14
  98:	20 01       	movw	r4, r0
  9a:	39 01       	movw	r6, r18
  9c:	5e 01       	movw	r10, r28
  9e:	77 01       	movw	r14, r14
  a0:	90 01       	movw	r18, r0
  a2:	a9 01       	movw	r20, r18
  a4:	c1 01       	movw	r24, r2
  a6:	c1 01       	movw	r24, r2
  a8:	c1 01       	movw	r24, r2
  aa:	c1 01       	movw	r24, r2
  ac:	c1 01       	movw	r24, r2
  ae:	c1 01       	movw	r24, r2
  b0:	c1 01       	movw	r24, r2
  b2:	c1 01       	movw	r24, r2
  b4:	c1 01       	movw	r24, r2
  b6:	c1 01       	movw	r24, r2
  b8:	c1 01       	movw	r24, r2
  ba:	c1 01       	movw	r24, r2
  bc:	c1 01       	movw	r24, r2
  be:	c1 01       	movw	r24, r2
  c0:	c1 01       	movw	r24, r2
  c2:	c1 01       	movw	r24, r2
  c4:	c1 01       	movw	r24, r2
  c6:	c1 01       	movw	r24, r2
  c8:	c1 01       	movw	r24, r2
  ca:	c1 01       	movw	r24, r2
  cc:	c1 01       	movw	r24, r2
  ce:	c1 01       	movw	r24, r2
  d0:	c1 01       	movw	r24, r2
  d2:	c1 01       	movw	r24, r2
  d4:	c1 01       	movw	r24, r2
  d6:	c1 01       	movw	r24, r2
  d8:	c1 01       	movw	r24, r2
  da:	c1 01       	movw	r24, r2
  dc:	5e 01       	movw	r10, r28
  de:	77 01       	movw	r14, r14
  e0:	90 01       	movw	r18, r0
  e2:	a9 01       	movw	r20, r18
  e4:	f5 01       	movw	r30, r10
  e6:	fb 01       	movw	r30, r22
  e8:	fb 01       	movw	r30, r22
  ea:	fb 01       	movw	r30, r22
  ec:	fb 01       	movw	r30, r22
  ee:	e7 01       	movw	r28, r14
  f0:	fb 01       	movw	r30, r22
  f2:	fb 01       	movw	r30, r22
  f4:	fb 01       	movw	r30, r22
  f6:	fb 01       	movw	r30, r22
  f8:	fb 01       	movw	r30, r22
  fa:	ee 01       	movw	r28, r28
  fc:	fb 01       	movw	r30, r22
  fe:	fb 01       	movw	r30, r22
 100:	fb 01       	movw	r30, r22
 102:	fb 01       	movw	r30, r22
 104:	fb 01       	movw	r30, r22
 106:	e0 01       	movw	r28, r0
 108:	fb 01       	movw	r30, r22
 10a:	fb 01       	movw	r30, r22
 10c:	fb 01       	movw	r30, r22
 10e:	fb 01       	movw	r30, r22
 110:	fb 01       	movw	r30, r22
 112:	fb 01       	movw	r30, r22
 114:	fb 01       	movw	r30, r22
 116:	fb 01       	movw	r30, r22
 118:	fb 01       	movw	r30, r22
 11a:	fb 01       	movw	r30, r22
 11c:	fb 01       	movw	r30, r22
 11e:	fb 01       	movw	r30, r22
 120:	fb 01       	movw	r30, r22
 122:	fb 01       	movw	r30, r22
 124:	f5 01       	movw	r30, r10
 126:	fb 01       	movw	r30, r22
 128:	fb 01       	movw	r30, r22
 12a:	fb 01       	movw	r30, r22
 12c:	fb 01       	movw	r30, r22
 12e:	e7 01       	movw	r28, r14
 130:	fb 01       	movw	r30, r22
 132:	fb 01       	movw	r30, r22
 134:	fb 01       	movw	r30, r22
 136:	fb 01       	movw	r30, r22
 138:	fb 01       	movw	r30, r22
 13a:	ee 01       	movw	r28, r28
 13c:	fb 01       	movw	r30, r22
 13e:	fb 01       	movw	r30, r22
 140:	fb 01       	movw	r30, r22
 142:	fb 01       	movw	r30, r22
 144:	fb 01       	movw	r30, r22
 146:	e0 01       	movw	r28, r0
 148:	24 02       	muls	r18, r20
 14a:	2a 02       	muls	r18, r26
 14c:	2a 02       	muls	r18, r26
 14e:	2a 02       	muls	r18, r26
 150:	2a 02       	muls	r18, r26
 152:	16 02       	muls	r17, r22
 154:	2a 02       	muls	r18, r26
 156:	2a 02       	muls	r18, r26
 158:	2a 02       	muls	r18, r26
 15a:	2a 02       	muls	r18, r26
 15c:	2a 02       	muls	r18, r26
 15e:	1d 02       	muls	r17, r29
 160:	2a 02       	muls	r18, r26
 162:	2a 02       	muls	r18, r26
 164:	2a 02       	muls	r18, r26
 166:	2a 02       	muls	r18, r26
 168:	2a 02       	muls	r18, r26
 16a:	0f 02       	muls	r16, r31
 16c:	2a 02       	muls	r18, r26
 16e:	2a 02       	muls	r18, r26
 170:	2a 02       	muls	r18, r26
 172:	2a 02       	muls	r18, r26
 174:	2a 02       	muls	r18, r26
 176:	2a 02       	muls	r18, r26
 178:	2a 02       	muls	r18, r26
 17a:	2a 02       	muls	r18, r26
 17c:	2a 02       	muls	r18, r26
 17e:	2a 02       	muls	r18, r26
 180:	2a 02       	muls	r18, r26
 182:	2a 02       	muls	r18, r26
 184:	2a 02       	muls	r18, r26
 186:	2a 02       	muls	r18, r26
 188:	24 02       	muls	r18, r20
 18a:	2a 02       	muls	r18, r26
 18c:	2a 02       	muls	r18, r26
 18e:	2a 02       	muls	r18, r26
 190:	2a 02       	muls	r18, r26
 192:	16 02       	muls	r17, r22
 194:	2a 02       	muls	r18, r26
 196:	2a 02       	muls	r18, r26
 198:	2a 02       	muls	r18, r26
 19a:	2a 02       	muls	r18, r26
 19c:	2a 02       	muls	r18, r26
 19e:	1d 02       	muls	r17, r29
 1a0:	2a 02       	muls	r18, r26
 1a2:	2a 02       	muls	r18, r26
 1a4:	2a 02       	muls	r18, r26
 1a6:	2a 02       	muls	r18, r26
 1a8:	2a 02       	muls	r18, r26
 1aa:	0f 02       	muls	r16, r31

000001ac <__ctors_end>:
 1ac:	11 24       	eor	r1, r1
 1ae:	1f be       	out	0x3f, r1	; 63
 1b0:	cf e5       	ldi	r28, 0x5F	; 95
 1b2:	d8 e0       	ldi	r29, 0x08	; 8
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
 1bc:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

000001c0 <__bad_interrupt>:
 1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <Dio_vSetPinDir>:
#include <avr/io.h>
#include "Macros.h"

void Dio_vSetPinDir(unsigned char port,unsigned char pin ,unsigned char direction)
{
	switch(port)
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	e1 54       	subi	r30, 0x41	; 65
 1ca:	f1 09       	sbc	r31, r1
 1cc:	e4 32       	cpi	r30, 0x24	; 36
 1ce:	f1 05       	cpc	r31, r1
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <Dio_vSetPinDir+0x10>
 1d2:	67 c0       	rjmp	.+206    	; 0x2a2 <Dio_vSetPinDir+0xde>
 1d4:	e6 5d       	subi	r30, 0xD6	; 214
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	0c 94 10 03 	jmp	0x620	; 0x620 <__tablejump2__>
	{
		// FOR PORT A
		case 'A':
		case 'a':
			if(direction==1)
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	59 f4       	brne	.+22     	; 0x1f6 <Dio_vSetPinDir+0x32>
			{Set_bit(DDRA,pin);}
 1e0:	2a b3       	in	r18, 0x1a	; 26
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <Dio_vSetPinDir+0x28>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <Dio_vSetPinDir+0x24>
 1f0:	82 2b       	or	r24, r18
 1f2:	8a bb       	out	0x1a, r24	; 26
 1f4:	08 95       	ret
			
			else
			{Clear_bit(DDRA,pin);}
 1f6:	2a b3       	in	r18, 0x1a	; 26
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <Dio_vSetPinDir+0x3e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_vSetPinDir+0x3a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	08 95       	ret
           break;
			
		// FOR PORT B
		case 'b':
		case 'B':
			if(direction==1)
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	59 f4       	brne	.+22     	; 0x228 <Dio_vSetPinDir+0x64>
			{Set_bit(DDRB,pin);}
 212:	27 b3       	in	r18, 0x17	; 23
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_vSetPinDir+0x5a>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_vSetPinDir+0x56>
 222:	82 2b       	or	r24, r18
 224:	87 bb       	out	0x17, r24	; 23
 226:	08 95       	ret

			else
			{Clear_bit(DDRB,pin);}
 228:	27 b3       	in	r18, 0x17	; 23
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <Dio_vSetPinDir+0x70>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <Dio_vSetPinDir+0x6c>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	08 95       	ret
			break;
			
		// FOR PORT C
		case 'C':
		case 'c':
			if(direction==1)
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	59 f4       	brne	.+22     	; 0x25a <Dio_vSetPinDir+0x96>
			{Set_bit(DDRC,pin);}
 244:	24 b3       	in	r18, 0x14	; 20
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Dio_vSetPinDir+0x8c>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <Dio_vSetPinDir+0x88>
 254:	82 2b       	or	r24, r18
 256:	84 bb       	out	0x14, r24	; 20
 258:	08 95       	ret
			else
			{Clear_bit(DDRC,pin);}
 25a:	24 b3       	in	r18, 0x14	; 20
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <Dio_vSetPinDir+0xa2>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <Dio_vSetPinDir+0x9e>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	84 bb       	out	0x14, r24	; 20
 270:	08 95       	ret
			break;
		
        // FOR PORT D
        case 'D':
        case 'd':
			if(direction==1)
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	59 f4       	brne	.+22     	; 0x28c <Dio_vSetPinDir+0xc8>
			{Set_bit(DDRD,pin);}
 276:	21 b3       	in	r18, 0x11	; 17
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <Dio_vSetPinDir+0xbe>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <Dio_vSetPinDir+0xba>
 286:	82 2b       	or	r24, r18
 288:	81 bb       	out	0x11, r24	; 17
 28a:	08 95       	ret
			else
			{Clear_bit(DDRD,pin);}
 28c:	21 b3       	in	r18, 0x11	; 17
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <Dio_vSetPinDir+0xd4>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Dio_vSetPinDir+0xd0>
 29c:	80 95       	com	r24
 29e:	82 23       	and	r24, r18
 2a0:	81 bb       	out	0x11, r24	; 17
 2a2:	08 95       	ret

000002a4 <DIO_vWrite_pin>:
	}
}

void DIO_vWrite_pin(unsigned char port,unsigned char pin,unsigned char value)
{
	switch(port)
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	e1 54       	subi	r30, 0x41	; 65
 2aa:	f1 09       	sbc	r31, r1
 2ac:	e4 32       	cpi	r30, 0x24	; 36
 2ae:	f1 05       	cpc	r31, r1
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <DIO_vWrite_pin+0x10>
 2b2:	67 c0       	rjmp	.+206    	; 0x382 <DIO_vWrite_pin+0xde>
 2b4:	e2 5b       	subi	r30, 0xB2	; 178
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	0c 94 10 03 	jmp	0x620	; 0x620 <__tablejump2__>
	{
		// FOR PORT A
		case 'A':
		case 'a':
			if(value==1)
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	59 f4       	brne	.+22     	; 0x2d6 <DIO_vWrite_pin+0x32>
			{Set_bit(PORTA,pin);}
 2c0:	2b b3       	in	r18, 0x1b	; 27
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_vWrite_pin+0x28>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_vWrite_pin+0x24>
 2d0:	82 2b       	or	r24, r18
 2d2:	8b bb       	out	0x1b, r24	; 27
 2d4:	08 95       	ret
		
			else
			{Clear_bit(PORTA,pin);}
 2d6:	2b b3       	in	r18, 0x1b	; 27
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vWrite_pin+0x3e>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_vWrite_pin+0x3a>
 2e6:	80 95       	com	r24
 2e8:	82 23       	and	r24, r18
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	08 95       	ret
			break;
		
		// FOR PORT B
		case 'b':
		case 'B':
			if(value==1)
 2ee:	41 30       	cpi	r20, 0x01	; 1
 2f0:	59 f4       	brne	.+22     	; 0x308 <DIO_vWrite_pin+0x64>
			{Set_bit(PORTB,pin);}
 2f2:	28 b3       	in	r18, 0x18	; 24
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_vWrite_pin+0x5a>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_vWrite_pin+0x56>
 302:	82 2b       	or	r24, r18
 304:	88 bb       	out	0x18, r24	; 24
 306:	08 95       	ret

			else
			{Clear_bit(PORTB,pin);}
 308:	28 b3       	in	r18, 0x18	; 24
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vWrite_pin+0x70>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vWrite_pin+0x6c>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	88 bb       	out	0x18, r24	; 24
 31e:	08 95       	ret
			break;

		// FOR PORT C
		case 'C':
		case 'c':
			if(value==1)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	59 f4       	brne	.+22     	; 0x33a <DIO_vWrite_pin+0x96>
			{Set_bit(PORTC,pin);}
 324:	25 b3       	in	r18, 0x15	; 21
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vWrite_pin+0x8c>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vWrite_pin+0x88>
 334:	82 2b       	or	r24, r18
 336:	85 bb       	out	0x15, r24	; 21
 338:	08 95       	ret
			else
			{Clear_bit(PORTC,pin);}
 33a:	25 b3       	in	r18, 0x15	; 21
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_vWrite_pin+0xa2>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_vWrite_pin+0x9e>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	85 bb       	out	0x15, r24	; 21
 350:	08 95       	ret
			break;
		
		// FOR PORT D
		case 'D':
		case 'd':
			if(value==1)
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	59 f4       	brne	.+22     	; 0x36c <DIO_vWrite_pin+0xc8>
			{Set_bit(PORTD,pin);}
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_vWrite_pin+0xbe>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_vWrite_pin+0xba>
 366:	82 2b       	or	r24, r18
 368:	82 bb       	out	0x12, r24	; 18
 36a:	08 95       	ret
			else
			{Clear_bit(PORTD,pin);}
 36c:	22 b3       	in	r18, 0x12	; 18
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_vWrite_pin+0xd4>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_vWrite_pin+0xd0>
 37c:	80 95       	com	r24
 37e:	82 23       	and	r24, r18
 380:	82 bb       	out	0x12, r24	; 18
 382:	08 95       	ret

00000384 <External_Interrupt_Initialize>:
#include "Macros.h"
#include "Dio.h"


void External_Interrupt_Initialize(unsigned char int_num,unsigned char trigger)
{
 384:	cf 93       	push	r28
 386:	c6 2f       	mov	r28, r22
	sei();
 388:	78 94       	sei
	switch(int_num)
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	a1 f1       	breq	.+104    	; 0x3f6 <External_Interrupt_Initialize+0x72>
 38e:	20 f0       	brcs	.+8      	; 0x398 <External_Interrupt_Initialize+0x14>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	09 f4       	brne	.+2      	; 0x396 <External_Interrupt_Initialize+0x12>
 394:	5f c0       	rjmp	.+190    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 396:	77 c0       	rjmp	.+238    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	{
		case 0:
		    Set_bit(GICR,INT0);
 398:	8b b7       	in	r24, 0x3b	; 59
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	8b bf       	out	0x3b, r24	; 59
			Dio_vSetPinDir('d',2,0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	84 e6       	ldi	r24, 0x64	; 100
 3a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Dio_vSetPinDir>
			switch(trigger)
 3a8:	8c 2f       	mov	r24, r28
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	e1 54       	subi	r30, 0x41	; 65
 3b0:	f1 09       	sbc	r31, r1
 3b2:	e2 33       	cpi	r30, 0x32	; 50
 3b4:	f1 05       	cpc	r31, r1
 3b6:	f8 f4       	brcc	.+62     	; 0x3f6 <External_Interrupt_Initialize+0x72>
 3b8:	ee 58       	subi	r30, 0x8E	; 142
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	0c 94 10 03 	jmp	0x620	; 0x620 <__tablejump2__>
			{
				case 'R':
				case 'r':
				    Set_bit(MCUCR,ISC00);
 3c0:	85 b7       	in	r24, 0x35	; 53
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	85 bf       	out	0x35, r24	; 53
					Set_bit(MCUCR,ISC01);
 3c6:	85 b7       	in	r24, 0x35	; 53
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	85 bf       	out	0x35, r24	; 53
					break;
 3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <External_Interrupt_Initialize+0x72>
					
				case 'F':
				case 'f':
					Clear_bit(MCUCR,ISC00);
 3ce:	85 b7       	in	r24, 0x35	; 53
 3d0:	8e 7f       	andi	r24, 0xFE	; 254
 3d2:	85 bf       	out	0x35, r24	; 53
					Set_bit(MCUCR,ISC01);
 3d4:	85 b7       	in	r24, 0x35	; 53
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	85 bf       	out	0x35, r24	; 53
					break;
 3da:	0d c0       	rjmp	.+26     	; 0x3f6 <External_Interrupt_Initialize+0x72>
				
				case 'L':
				case 'l':
					Clear_bit(MCUCR,ISC00);
 3dc:	85 b7       	in	r24, 0x35	; 53
 3de:	8e 7f       	andi	r24, 0xFE	; 254
 3e0:	85 bf       	out	0x35, r24	; 53
					Clear_bit(MCUCR,ISC01);
 3e2:	85 b7       	in	r24, 0x35	; 53
 3e4:	8d 7f       	andi	r24, 0xFD	; 253
 3e6:	85 bf       	out	0x35, r24	; 53
					break;
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <External_Interrupt_Initialize+0x72>
				
				case 'A':
				case 'a':
					Set_bit(MCUCR,ISC00);
 3ea:	85 b7       	in	r24, 0x35	; 53
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	85 bf       	out	0x35, r24	; 53
					Clear_bit(MCUCR,ISC01);
 3f0:	85 b7       	in	r24, 0x35	; 53
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	85 bf       	out	0x35, r24	; 53
					break;
					
			}
		
		case 1:
			Set_bit(GICR,INT1);
 3f6:	8b b7       	in	r24, 0x3b	; 59
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8b bf       	out	0x3b, r24	; 59
			Dio_vSetPinDir('d',3,0);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	84 e6       	ldi	r24, 0x64	; 100
 402:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Dio_vSetPinDir>
			switch(trigger)
 406:	8c 2f       	mov	r24, r28
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	fc 01       	movw	r30, r24
 40c:	e1 54       	subi	r30, 0x41	; 65
 40e:	f1 09       	sbc	r31, r1
 410:	e2 33       	cpi	r30, 0x32	; 50
 412:	f1 05       	cpc	r31, r1
 414:	f8 f4       	brcc	.+62     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 416:	ec 55       	subi	r30, 0x5C	; 92
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	0c 94 10 03 	jmp	0x620	; 0x620 <__tablejump2__>
			{
				case 'R':
				case 'r':
					Set_bit(MCUCR,ISC10);
 41e:	85 b7       	in	r24, 0x35	; 53
 420:	84 60       	ori	r24, 0x04	; 4
 422:	85 bf       	out	0x35, r24	; 53
					Set_bit(MCUCR,ISC11);
 424:	85 b7       	in	r24, 0x35	; 53
 426:	88 60       	ori	r24, 0x08	; 8
 428:	85 bf       	out	0x35, r24	; 53
					break;
 42a:	14 c0       	rjmp	.+40     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				
				case 'F':
				case 'f':
					Clear_bit(MCUCR,ISC10);
 42c:	85 b7       	in	r24, 0x35	; 53
 42e:	8b 7f       	andi	r24, 0xFB	; 251
 430:	85 bf       	out	0x35, r24	; 53
					Set_bit(MCUCR,ISC11);
 432:	85 b7       	in	r24, 0x35	; 53
 434:	88 60       	ori	r24, 0x08	; 8
 436:	85 bf       	out	0x35, r24	; 53
					break;
 438:	0d c0       	rjmp	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				
				case 'L':
				case 'l':
					Clear_bit(MCUCR,ISC10);
 43a:	85 b7       	in	r24, 0x35	; 53
 43c:	8b 7f       	andi	r24, 0xFB	; 251
 43e:	85 bf       	out	0x35, r24	; 53
					Clear_bit(MCUCR,ISC11);
 440:	85 b7       	in	r24, 0x35	; 53
 442:	87 7f       	andi	r24, 0xF7	; 247
 444:	85 bf       	out	0x35, r24	; 53
					break;
 446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				
				case 'A':
				case 'a':
					Set_bit(MCUCR,ISC10);
 448:	85 b7       	in	r24, 0x35	; 53
 44a:	84 60       	ori	r24, 0x04	; 4
 44c:	85 bf       	out	0x35, r24	; 53
					Clear_bit(MCUCR,ISC11);
 44e:	85 b7       	in	r24, 0x35	; 53
 450:	87 7f       	andi	r24, 0xF7	; 247
 452:	85 bf       	out	0x35, r24	; 53
					break;
				
			}
		
		case 2:
			Set_bit(GICR,INT2);
 454:	8b b7       	in	r24, 0x3b	; 59
 456:	80 62       	ori	r24, 0x20	; 32
 458:	8b bf       	out	0x3b, r24	; 59
			Dio_vSetPinDir('b',2,0);
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	82 e6       	ldi	r24, 0x62	; 98
 460:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Dio_vSetPinDir>
			switch(trigger)
 464:	c2 35       	cpi	r28, 0x52	; 82
 466:	41 f0       	breq	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 468:	18 f4       	brcc	.+6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46a:	c6 34       	cpi	r28, 0x46	; 70
 46c:	49 f0       	breq	.+18     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 46e:	0b c0       	rjmp	.+22     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 470:	c6 36       	cpi	r28, 0x66	; 102
 472:	31 f0       	breq	.+12     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 474:	c2 37       	cpi	r28, 0x72	; 114
 476:	39 f4       	brne	.+14     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			{
				case 'R':
				case 'r':
					Set_bit(MCUCSR,ISC2);
 478:	84 b7       	in	r24, 0x34	; 52
 47a:	80 64       	ori	r24, 0x40	; 64
 47c:	84 bf       	out	0x34, r24	; 52
					break;
 47e:	03 c0       	rjmp	.+6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				
				case 'F':
				case 'f':
					Clear_bit(MCUCSR,ISC2);
 480:	84 b7       	in	r24, 0x34	; 52
 482:	8f 7b       	andi	r24, 0xBF	; 191
 484:	84 bf       	out	0x34, r24	; 52
					break;
			}
	}
} 
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <LED_vInit>:
 */ 
#include "Dio.h"

void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	Dio_vSetPinDir(portname,pinnumber,1);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Dio_vSetPinDir>
 490:	08 95       	ret

00000492 <LED_vTurnOn>:



void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_vWrite_pin(portname,pinnumber,1);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_vWrite_pin>
 498:	08 95       	ret

0000049a <LED_vTurnOff>:



void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_vWrite_pin(portname,pinnumber,0);
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_vWrite_pin>
 4a0:	08 95       	ret

000004a2 <main>:


int main(void)
{
	
	External_Interrupt_Initialize(0,'f');
 4a2:	66 e6       	ldi	r22, 0x66	; 102
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 c2 01 	call	0x384	; 0x384 <External_Interrupt_Initialize>
	External_Interrupt_Initialize(1,'f');
 4aa:	66 e6       	ldi	r22, 0x66	; 102
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 c2 01 	call	0x384	; 0x384 <External_Interrupt_Initialize>
	External_Interrupt_Initialize(2,'f');
 4b2:	66 e6       	ldi	r22, 0x66	; 102
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	0e 94 c2 01 	call	0x384	; 0x384 <External_Interrupt_Initialize>
	
    LED_vInit('a',0);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	81 e6       	ldi	r24, 0x61	; 97
 4be:	0e 94 45 02 	call	0x48a	; 0x48a <LED_vInit>
	LED_vInit('a',1);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	81 e6       	ldi	r24, 0x61	; 97
 4c6:	0e 94 45 02 	call	0x48a	; 0x48a <LED_vInit>
	LED_vInit('a',2);
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	81 e6       	ldi	r24, 0x61	; 97
 4ce:	0e 94 45 02 	call	0x48a	; 0x48a <LED_vInit>
    while (1) 
    {
		//turning of all the leds
		LED_vTurnOff('a',0);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	81 e6       	ldi	r24, 0x61	; 97
 4d6:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_vTurnOff>
		LED_vTurnOff('a',1);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	81 e6       	ldi	r24, 0x61	; 97
 4de:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_vTurnOff>
		LED_vTurnOff('a',2);
 4e2:	62 e0       	ldi	r22, 0x02	; 2
 4e4:	81 e6       	ldi	r24, 0x61	; 97
 4e6:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_vTurnOff>
 4ea:	f3 cf       	rjmp	.-26     	; 0x4d2 <main+0x30>

000004ec <__vector_1>:
    }
}

ISR(INT0_vect)
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
	LED_vTurnOn('a',0);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	81 e6       	ldi	r24, 0x61	; 97
 512:	0e 94 49 02 	call	0x492	; 0x492 <LED_vTurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 516:	2f ef       	ldi	r18, 0xFF	; 255
 518:	83 ed       	ldi	r24, 0xD3	; 211
 51a:	90 e3       	ldi	r25, 0x30	; 48
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <__vector_1+0x30>
 524:	00 c0       	rjmp	.+0      	; 0x526 <__vector_1+0x3a>
 526:	00 00       	nop
	_delay_ms(2000);
	LED_vTurnOff('a',0);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	81 e6       	ldi	r24, 0x61	; 97
 52c:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_vTurnOff>

	
	

}
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__vector_2>:


ISR(INT1_vect)
{
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	6f 93       	push	r22
 566:	7f 93       	push	r23
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	af 93       	push	r26
 56e:	bf 93       	push	r27
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
	sei();
 574:	78 94       	sei
	LED_vTurnOn('a',1);
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	81 e6       	ldi	r24, 0x61	; 97
 57a:	0e 94 49 02 	call	0x492	; 0x492 <LED_vTurnOn>
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	83 ed       	ldi	r24, 0xD3	; 211
 582:	90 e3       	ldi	r25, 0x30	; 48
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <__vector_2+0x32>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <__vector_2+0x3c>
 58e:	00 00       	nop
	_delay_ms(2000);
	LED_vTurnOff('a',1);
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	81 e6       	ldi	r24, 0x61	; 97
 594:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_vTurnOff>
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_3>:

ISR(INT2_vect)
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
	LED_vTurnOn('a',2);
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	81 e6       	ldi	r24, 0x61	; 97
 5e0:	0e 94 49 02 	call	0x492	; 0x492 <LED_vTurnOn>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	83 ed       	ldi	r24, 0xD3	; 211
 5e8:	90 e3       	ldi	r25, 0x30	; 48
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <__vector_3+0x30>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <__vector_3+0x3a>
 5f4:	00 00       	nop
	_delay_ms(2000);
	LED_vTurnOff('a',2);
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	81 e6       	ldi	r24, 0x61	; 97
 5fa:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_vTurnOff>
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <__tablejump2__>:
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	05 90       	lpm	r0, Z+
 626:	f4 91       	lpm	r31, Z
 628:	e0 2d       	mov	r30, r0
 62a:	09 94       	ijmp

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
