
external interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000426  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000730  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b8  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005fd  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000029c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  8a:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_vInit>:
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_vsetPINDir>
  98:	08 95       	ret

0000009a <button_u8read>:
  9a:	0e 94 42 01 	call	0x284	; 0x284 <DIO_u8read>
  9e:	08 95       	ret

000000a0 <LED_vInit>:
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_vsetPINDir>
  a6:	08 95       	ret

000000a8 <LED_vTurnOn>:
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_write>
  ae:	08 95       	ret

000000b0 <LED_vTurnOff>:
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_write>
  b6:	08 95       	ret

000000b8 <LED_vToggle>:
  b8:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_toggle>
  bc:	08 95       	ret

000000be <LED_u8ReadStatus>:
  be:	0e 94 42 01 	call	0x284	; 0x284 <DIO_u8read>
  c2:	08 95       	ret

000000c4 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "DIO.h"
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  c4:	82 34       	cpi	r24, 0x42	; 66
  c6:	19 f1       	breq	.+70     	; 0x10e <DIO_vsetPINDir+0x4a>
  c8:	18 f4       	brcc	.+6      	; 0xd0 <DIO_vsetPINDir+0xc>
  ca:	81 34       	cpi	r24, 0x41	; 65
  cc:	39 f0       	breq	.+14     	; 0xdc <DIO_vsetPINDir+0x18>
  ce:	08 95       	ret
  d0:	83 34       	cpi	r24, 0x43	; 67
  d2:	b1 f1       	breq	.+108    	; 0x140 <DIO_vsetPINDir+0x7c>
  d4:	84 34       	cpi	r24, 0x44	; 68
  d6:	09 f4       	brne	.+2      	; 0xda <DIO_vsetPINDir+0x16>
  d8:	4c c0       	rjmp	.+152    	; 0x172 <DIO_vsetPINDir+0xae>
  da:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  e0:	2a b3       	in	r18, 0x1a	; 26
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x28>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x24>
  f0:	82 2b       	or	r24, r18
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x3e>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x3a>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	8a bb       	out	0x1a, r24	; 26
 10c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x5a>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x56>
 122:	82 2b       	or	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 128:	27 b3       	in	r18, 0x17	; 23
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0x70>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x6c>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0x8c>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0x88>
 154:	82 2b       	or	r24, r18
 156:	84 bb       	out	0x14, r24	; 20
 158:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 15a:	24 b3       	in	r18, 0x14	; 20
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xa2>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0x9e>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	84 bb       	out	0x14, r24	; 20
 170:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	59 f4       	brne	.+22     	; 0x18c <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 176:	21 b3       	in	r18, 0x11	; 17
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vsetPINDir+0xbe>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vsetPINDir+0xba>
 186:	82 2b       	or	r24, r18
 188:	81 bb       	out	0x11, r24	; 17
 18a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vsetPINDir+0xd4>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vsetPINDir+0xd0>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	81 bb       	out	0x11, r24	; 17
 1a2:	08 95       	ret

000001a4 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1a4:	82 34       	cpi	r24, 0x42	; 66
 1a6:	19 f1       	breq	.+70     	; 0x1ee <DIO_write+0x4a>
 1a8:	18 f4       	brcc	.+6      	; 0x1b0 <DIO_write+0xc>
 1aa:	81 34       	cpi	r24, 0x41	; 65
 1ac:	39 f0       	breq	.+14     	; 0x1bc <DIO_write+0x18>
 1ae:	08 95       	ret
 1b0:	83 34       	cpi	r24, 0x43	; 67
 1b2:	b1 f1       	breq	.+108    	; 0x220 <DIO_write+0x7c>
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_write+0x16>
 1b8:	4c c0       	rjmp	.+152    	; 0x252 <DIO_write+0xae>
 1ba:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1c0:	2b b3       	in	r18, 0x1b	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x28>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x24>
 1d0:	82 2b       	or	r24, r18
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x3e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x3a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x5a>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x56>
 202:	82 2b       	or	r24, r18
 204:	88 bb       	out	0x18, r24	; 24
 206:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 208:	28 b3       	in	r18, 0x18	; 24
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0x70>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x6c>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	88 bb       	out	0x18, r24	; 24
 21e:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 224:	25 b3       	in	r18, 0x15	; 21
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0x8c>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0x88>
 234:	82 2b       	or	r24, r18
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 23a:	25 b3       	in	r18, 0x15	; 21
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xa2>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0x9e>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 256:	22 b3       	in	r18, 0x12	; 18
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write+0xbe>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write+0xba>
 266:	82 2b       	or	r24, r18
 268:	82 bb       	out	0x12, r24	; 18
 26a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 26c:	22 b3       	in	r18, 0x12	; 18
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_write+0xd4>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_write+0xd0>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 284:	82 34       	cpi	r24, 0x42	; 66
 286:	d9 f0       	breq	.+54     	; 0x2be <DIO_u8read+0x3a>
 288:	18 f4       	brcc	.+6      	; 0x290 <DIO_u8read+0xc>
 28a:	81 34       	cpi	r24, 0x41	; 65
 28c:	31 f0       	breq	.+12     	; 0x29a <DIO_u8read+0x16>
 28e:	4d c0       	rjmp	.+154    	; 0x32a <DIO_u8read+0xa6>
 290:	83 34       	cpi	r24, 0x43	; 67
 292:	39 f1       	breq	.+78     	; 0x2e2 <DIO_u8read+0x5e>
 294:	84 34       	cpi	r24, 0x44	; 68
 296:	b9 f1       	breq	.+110    	; 0x306 <DIO_u8read+0x82>
 298:	48 c0       	rjmp	.+144    	; 0x32a <DIO_u8read+0xa6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 29a:	29 b3       	in	r18, 0x19	; 25
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	06 2e       	mov	r0, r22
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_u8read+0x24>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_u8read+0x20>
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	82 23       	and	r24, r18
 2b0:	93 23       	and	r25, r19
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_u8read+0x34>
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_u8read+0x30>
		break;
 2bc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2be:	26 b3       	in	r18, 0x16	; 22
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	06 2e       	mov	r0, r22
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_u8read+0x48>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_u8read+0x44>
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	82 23       	and	r24, r18
 2d4:	93 23       	and	r25, r19
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_u8read+0x58>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_u8read+0x54>
		break;
 2e0:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 2e2:	23 b3       	in	r18, 0x13	; 19
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8read+0x6c>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8read+0x68>
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	82 23       	and	r24, r18
 2f8:	93 23       	and	r25, r19
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8read+0x7c>
 2fc:	95 95       	asr	r25
 2fe:	87 95       	ror	r24
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8read+0x78>
		break;
 304:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 306:	20 b3       	in	r18, 0x10	; 16
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	06 2e       	mov	r0, r22
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8read+0x90>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8read+0x8c>
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	82 23       	and	r24, r18
 31c:	93 23       	and	r25, r19
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8read+0xa0>
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_u8read+0x9c>
		break;
 328:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 32a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 32c:	08 95       	ret

0000032e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 32e:	82 34       	cpi	r24, 0x42	; 66
 330:	a1 f0       	breq	.+40     	; 0x35a <DIO_toggle+0x2c>
 332:	18 f4       	brcc	.+6      	; 0x33a <DIO_toggle+0xc>
 334:	81 34       	cpi	r24, 0x41	; 65
 336:	31 f0       	breq	.+12     	; 0x344 <DIO_toggle+0x16>
 338:	08 95       	ret
 33a:	83 34       	cpi	r24, 0x43	; 67
 33c:	c9 f0       	breq	.+50     	; 0x370 <DIO_toggle+0x42>
 33e:	84 34       	cpi	r24, 0x44	; 68
 340:	11 f1       	breq	.+68     	; 0x386 <DIO_toggle+0x58>
 342:	08 95       	ret
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 344:	2b b3       	in	r18, 0x1b	; 27
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_toggle+0x22>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_toggle+0x1e>
 354:	82 27       	eor	r24, r18
 356:	8b bb       	out	0x1b, r24	; 27
		break;
 358:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 35a:	28 b3       	in	r18, 0x18	; 24
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_toggle+0x38>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_toggle+0x34>
 36a:	82 27       	eor	r24, r18
 36c:	88 bb       	out	0x18, r24	; 24
		break;
 36e:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 370:	25 b3       	in	r18, 0x15	; 21
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_toggle+0x4e>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_toggle+0x4a>
 380:	82 27       	eor	r24, r18
 382:	85 bb       	out	0x15, r24	; 21
		break;
 384:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 386:	22 b3       	in	r18, 0x12	; 18
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_toggle+0x64>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_toggle+0x60>
 396:	82 27       	eor	r24, r18
 398:	82 bb       	out	0x12, r24	; 18
 39a:	08 95       	ret

0000039c <main>:
#include "button.h"


int main(void)
{
	LED_vInit('D',7);  // intialize led
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	84 e4       	ldi	r24, 0x44	; 68
 3a0:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_vInit>
	button_vInit('D',2);
 3a4:	62 e0       	ldi	r22, 0x02	; 2
 3a6:	84 e4       	ldi	r24, 0x44	; 68
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	sei();  // to open global interrupt bit (I-bit)
 3ac:	78 94       	sei
	MCUCR |= (1<<ISC01)|(1<<ISC00);  // to select rising edge mode
 3ae:	85 b7       	in	r24, 0x35	; 53
 3b0:	83 60       	ori	r24, 0x03	; 3
 3b2:	85 bf       	out	0x35, r24	; 53
	GICR|=(1<<INT0);// to enable interrupt 0
 3b4:	8b b7       	in	r24, 0x3b	; 59
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	8b bf       	out	0x3b, r24	; 59

	while(1)
	{
		LED_vTurnOff('D',7); // dim the led
 3ba:	67 e0       	ldi	r22, 0x07	; 7
 3bc:	84 e4       	ldi	r24, 0x44	; 68
 3be:	0e 94 58 00 	call	0xb0	; 0xb0 <LED_vTurnOff>
 3c2:	fb cf       	rjmp	.-10     	; 0x3ba <main+0x1e>

000003c4 <__vector_1>:
	}
}

ISR(INT0_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	LED_vTurnOn('D',7); // light up the led
 3e6:	67 e0       	ldi	r22, 0x07	; 7
 3e8:	84 e4       	ldi	r24, 0x44	; 68
 3ea:	0e 94 54 00 	call	0xa8	; 0xa8 <LED_vTurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	89 e6       	ldi	r24, 0x69	; 105
 3f2:	98 e1       	ldi	r25, 0x18	; 24
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <__vector_1+0x30>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <__vector_1+0x3a>
 3fe:	00 00       	nop
	_delay_ms(1000);  //delay 1 sec
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
