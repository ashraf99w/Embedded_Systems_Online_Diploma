
the safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000900  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000c8  008000c8  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000165e  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097a  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9e  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00003700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005aa  00000000  00000000  0000390c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3f  00000000  00000000  00003eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004cf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ec       	ldi	r26, 0xC8	; 200
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 03 	call	0x6fe	; 0x6fe <main>
  8a:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_vInit>:
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  a6:	84 e4       	ldi	r24, 0x44	; 68
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  ba:	84 e4       	ldi	r24, 0x44	; 68
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  ce:	84 e4       	ldi	r24, 0x44	; 68
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  d8:	84 e4       	ldi	r24, 0x44	; 68
  da:	67 e0       	ldi	r22, 0x07	; 7
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
  e2:	84 e4       	ldi	r24, 0x44	; 68
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
  ec:	84 e4       	ldi	r24, 0x44	; 68
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
  f6:	84 e4       	ldi	r24, 0x44	; 68
  f8:	66 e0       	ldi	r22, 0x06	; 6
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
 100:	84 e4       	ldi	r24, 0x44	; 68
 102:	67 e0       	ldi	r22, 0x07	; 7
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
 10a:	08 95       	ret

0000010c <keypad_u8check_press>:
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	60 97       	sbiw	r28, 0x10	; 16
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	de 01       	movw	r26, r28
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	e0 e6       	ldi	r30, 0x60	; 96
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	81 50       	subi	r24, 0x01	; 1
 134:	e1 f7       	brne	.-8      	; 0x12e <keypad_u8check_press+0x22>
 136:	00 e0       	ldi	r16, 0x00	; 0
 138:	84 e4       	ldi	r24, 0x44	; 68
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 142:	84 e4       	ldi	r24, 0x44	; 68
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 156:	84 e4       	ldi	r24, 0x44	; 68
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 160:	84 e4       	ldi	r24, 0x44	; 68
 162:	60 2f       	mov	r22, r16
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	61 2f       	mov	r22, r17
 16e:	6c 5f       	subi	r22, 0xFC	; 252
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_u8read>
 176:	88 23       	and	r24, r24
 178:	61 f4       	brne	.+24     	; 0x192 <keypad_u8check_press+0x86>
 17a:	e0 2f       	mov	r30, r16
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e1 0f       	add	r30, r17
 188:	f1 1d       	adc	r31, r1
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	04 c0       	rjmp	.+8      	; 0x19a <keypad_u8check_press+0x8e>
 192:	1f 5f       	subi	r17, 0xFF	; 255
 194:	14 30       	cpi	r17, 0x04	; 4
 196:	51 f7       	brne	.-44     	; 0x16c <keypad_u8check_press+0x60>
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <keypad_u8check_press+0xa4>
 19a:	60 96       	adiw	r28, 0x10	; 16
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret
 1b0:	0f 5f       	subi	r16, 0xFF	; 255
 1b2:	04 30       	cpi	r16, 0x04	; 4
 1b4:	09 f6       	brne	.-126    	; 0x138 <keypad_u8check_press+0x2c>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	f0 cf       	rjmp	.-32     	; 0x19a <keypad_u8check_press+0x8e>

000001ba <DIO_vsetPINDir>:
		break ;
		default:
		break ;
	}
	return return_val;
}
 1ba:	82 34       	cpi	r24, 0x42	; 66
 1bc:	19 f1       	breq	.+70     	; 0x204 <DIO_vsetPINDir+0x4a>
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <DIO_vsetPINDir+0xc>
 1c0:	81 34       	cpi	r24, 0x41	; 65
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <DIO_vsetPINDir+0x18>
 1c4:	08 95       	ret
 1c6:	83 34       	cpi	r24, 0x43	; 67
 1c8:	b1 f1       	breq	.+108    	; 0x236 <DIO_vsetPINDir+0x7c>
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_vsetPINDir+0x16>
 1ce:	4c c0       	rjmp	.+152    	; 0x268 <DIO_vsetPINDir+0xae>
 1d0:	08 95       	ret
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	59 f4       	brne	.+22     	; 0x1ec <DIO_vsetPINDir+0x32>
 1d6:	2a b3       	in	r18, 0x1a	; 26
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_vsetPINDir+0x28>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_vsetPINDir+0x24>
 1e6:	82 2b       	or	r24, r18
 1e8:	8a bb       	out	0x1a, r24	; 26
 1ea:	08 95       	ret
 1ec:	2a b3       	in	r18, 0x1a	; 26
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vsetPINDir+0x3e>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vsetPINDir+0x3a>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	8a bb       	out	0x1a, r24	; 26
 202:	08 95       	ret
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_vsetPINDir+0x64>
 208:	27 b3       	in	r18, 0x17	; 23
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vsetPINDir+0x5a>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vsetPINDir+0x56>
 218:	82 2b       	or	r24, r18
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	08 95       	ret
 21e:	27 b3       	in	r18, 0x17	; 23
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vsetPINDir+0x70>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vsetPINDir+0x6c>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	87 bb       	out	0x17, r24	; 23
 234:	08 95       	ret
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <DIO_vsetPINDir+0x96>
 23a:	24 b3       	in	r18, 0x14	; 20
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_vsetPINDir+0x8c>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_vsetPINDir+0x88>
 24a:	82 2b       	or	r24, r18
 24c:	84 bb       	out	0x14, r24	; 20
 24e:	08 95       	ret
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vsetPINDir+0xa2>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vsetPINDir+0x9e>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_vsetPINDir+0xc8>
 26c:	21 b3       	in	r18, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_vsetPINDir+0xbe>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_vsetPINDir+0xba>
 27c:	82 2b       	or	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret
 282:	21 b3       	in	r18, 0x11	; 17
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vsetPINDir+0xd4>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vsetPINDir+0xd0>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	81 bb       	out	0x11, r24	; 17
 298:	08 95       	ret

0000029a <DIO_write>:
 29a:	82 34       	cpi	r24, 0x42	; 66
 29c:	19 f1       	breq	.+70     	; 0x2e4 <DIO_write+0x4a>
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <DIO_write+0xc>
 2a0:	81 34       	cpi	r24, 0x41	; 65
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <DIO_write+0x18>
 2a4:	08 95       	ret
 2a6:	83 34       	cpi	r24, 0x43	; 67
 2a8:	b1 f1       	breq	.+108    	; 0x316 <DIO_write+0x7c>
 2aa:	84 34       	cpi	r24, 0x44	; 68
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <DIO_write+0x16>
 2ae:	4c c0       	rjmp	.+152    	; 0x348 <DIO_write+0xae>
 2b0:	08 95       	ret
 2b2:	41 30       	cpi	r20, 0x01	; 1
 2b4:	59 f4       	brne	.+22     	; 0x2cc <DIO_write+0x32>
 2b6:	2b b3       	in	r18, 0x1b	; 27
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_write+0x28>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_write+0x24>
 2c6:	82 2b       	or	r24, r18
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	08 95       	ret
 2cc:	2b b3       	in	r18, 0x1b	; 27
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write+0x3e>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write+0x3a>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	8b bb       	out	0x1b, r24	; 27
 2e2:	08 95       	ret
 2e4:	41 30       	cpi	r20, 0x01	; 1
 2e6:	59 f4       	brne	.+22     	; 0x2fe <DIO_write+0x64>
 2e8:	28 b3       	in	r18, 0x18	; 24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_write+0x5a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_write+0x56>
 2f8:	82 2b       	or	r24, r18
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	08 95       	ret
 2fe:	28 b3       	in	r18, 0x18	; 24
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write+0x70>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write+0x6c>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	88 bb       	out	0x18, r24	; 24
 314:	08 95       	ret
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	59 f4       	brne	.+22     	; 0x330 <DIO_write+0x96>
 31a:	25 b3       	in	r18, 0x15	; 21
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_write+0x8c>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_write+0x88>
 32a:	82 2b       	or	r24, r18
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	08 95       	ret
 330:	25 b3       	in	r18, 0x15	; 21
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_write+0xa2>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_write+0x9e>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	85 bb       	out	0x15, r24	; 21
 346:	08 95       	ret
 348:	41 30       	cpi	r20, 0x01	; 1
 34a:	59 f4       	brne	.+22     	; 0x362 <DIO_write+0xc8>
 34c:	22 b3       	in	r18, 0x12	; 18
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0xbe>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0xba>
 35c:	82 2b       	or	r24, r18
 35e:	82 bb       	out	0x12, r24	; 18
 360:	08 95       	ret
 362:	22 b3       	in	r18, 0x12	; 18
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_write+0xd4>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_write+0xd0>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	82 bb       	out	0x12, r24	; 18
 378:	08 95       	ret

0000037a <DIO_u8read>:
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	d9 f0       	breq	.+54     	; 0x3b4 <DIO_u8read+0x3a>
 37e:	18 f4       	brcc	.+6      	; 0x386 <DIO_u8read+0xc>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	31 f0       	breq	.+12     	; 0x390 <DIO_u8read+0x16>
 384:	4d c0       	rjmp	.+154    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 386:	83 34       	cpi	r24, 0x43	; 67
 388:	39 f1       	breq	.+78     	; 0x3d8 <DIO_u8read+0x5e>
 38a:	84 34       	cpi	r24, 0x44	; 68
 38c:	b9 f1       	breq	.+110    	; 0x3fc <DIO_u8read+0x82>
 38e:	48 c0       	rjmp	.+144    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 390:	29 b3       	in	r18, 0x19	; 25
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	06 2e       	mov	r0, r22
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_u8read+0x24>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_u8read+0x20>
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	82 23       	and	r24, r18
 3a6:	93 23       	and	r25, r19
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8read+0x34>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8read+0x30>
 3b2:	08 95       	ret
 3b4:	26 b3       	in	r18, 0x16	; 22
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	06 2e       	mov	r0, r22
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8read+0x48>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8read+0x44>
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	82 23       	and	r24, r18
 3ca:	93 23       	and	r25, r19
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_u8read+0x58>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_u8read+0x54>
 3d6:	08 95       	ret
 3d8:	23 b3       	in	r18, 0x13	; 19
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	06 2e       	mov	r0, r22
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8read+0x6c>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8read+0x68>
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	82 23       	and	r24, r18
 3ee:	93 23       	and	r25, r19
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_u8read+0x7c>
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_u8read+0x78>
 3fa:	08 95       	ret
 3fc:	20 b3       	in	r18, 0x10	; 16
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	06 2e       	mov	r0, r22
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	82 23       	and	r24, r18
 412:	93 23       	and	r25, r19
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	08 95       	ret
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret

00000424 <DIO_write_port>:
 424:	82 34       	cpi	r24, 0x42	; 66
 426:	59 f0       	breq	.+22     	; 0x43e <DIO_write_port+0x1a>
 428:	18 f4       	brcc	.+6      	; 0x430 <DIO_write_port+0xc>
 42a:	81 34       	cpi	r24, 0x41	; 65
 42c:	31 f0       	breq	.+12     	; 0x43a <DIO_write_port+0x16>
 42e:	08 95       	ret
 430:	83 34       	cpi	r24, 0x43	; 67
 432:	39 f0       	breq	.+14     	; 0x442 <DIO_write_port+0x1e>
 434:	84 34       	cpi	r24, 0x44	; 68
 436:	39 f0       	breq	.+14     	; 0x446 <DIO_write_port+0x22>
 438:	08 95       	ret
 43a:	6b bb       	out	0x1b, r22	; 27
 43c:	08 95       	ret
 43e:	68 bb       	out	0x18, r22	; 24
 440:	08 95       	ret
 442:	65 bb       	out	0x15, r22	; 21
 444:	08 95       	ret
 446:	62 bb       	out	0x12, r22	; 18
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	19 f1       	breq	.+70     	; 0x494 <DIO_vconnectpullup+0x4a>
 44e:	18 f4       	brcc	.+6      	; 0x456 <DIO_vconnectpullup+0xc>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	39 f0       	breq	.+14     	; 0x462 <DIO_vconnectpullup+0x18>
 454:	08 95       	ret
 456:	83 34       	cpi	r24, 0x43	; 67
 458:	b1 f1       	breq	.+108    	; 0x4c6 <DIO_vconnectpullup+0x7c>
 45a:	84 34       	cpi	r24, 0x44	; 68
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	4c c0       	rjmp	.+152    	; 0x4f8 <DIO_vconnectpullup+0xae>
 460:	08 95       	ret
	{
		case 'A':
		if(connect_pullup==1)
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	59 f4       	brne	.+22     	; 0x47c <DIO_vconnectpullup+0x32>
		{
			SET_BIT(PORTA,pinnumber);
 466:	2b b3       	in	r18, 0x1b	; 27
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_vconnectpullup+0x28>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_vconnectpullup+0x24>
 476:	82 2b       	or	r24, r18
 478:	8b bb       	out	0x1b, r24	; 27
 47a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_vconnectpullup+0x3e>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_vconnectpullup+0x3a>
 48c:	80 95       	com	r24
 48e:	82 23       	and	r24, r18
 490:	8b bb       	out	0x1b, r24	; 27
 492:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	59 f4       	brne	.+22     	; 0x4ae <DIO_vconnectpullup+0x64>
		{
			SET_BIT(PORTB,pinnumber);
 498:	28 b3       	in	r18, 0x18	; 24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_vconnectpullup+0x5a>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_vconnectpullup+0x56>
 4a8:	82 2b       	or	r24, r18
 4aa:	88 bb       	out	0x18, r24	; 24
 4ac:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4ae:	28 b3       	in	r18, 0x18	; 24
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_vconnectpullup+0x70>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_vconnectpullup+0x6c>
 4be:	80 95       	com	r24
 4c0:	82 23       	and	r24, r18
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	59 f4       	brne	.+22     	; 0x4e0 <DIO_vconnectpullup+0x96>
		{
			SET_BIT(PORTC,pinnumber);
 4ca:	25 b3       	in	r18, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_vconnectpullup+0x8c>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_vconnectpullup+0x88>
 4da:	82 2b       	or	r24, r18
 4dc:	85 bb       	out	0x15, r24	; 21
 4de:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_vconnectpullup+0xa2>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_vconnectpullup+0x9e>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	85 bb       	out	0x15, r24	; 21
 4f6:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	59 f4       	brne	.+22     	; 0x512 <DIO_vconnectpullup+0xc8>
		{
			SET_BIT(PORTD,pinnumber);
 4fc:	22 b3       	in	r18, 0x12	; 18
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	82 2b       	or	r24, r18
 50e:	82 bb       	out	0x12, r24	; 18
 510:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 512:	22 b3       	in	r18, 0x12	; 18
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_vconnectpullup+0xd4>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_vconnectpullup+0xd0>
 522:	80 95       	com	r24
 524:	82 23       	and	r24, r18
 526:	82 bb       	out	0x12, r24	; 18
 528:	08 95       	ret

0000052a <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
 52a:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 52c:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
 52e:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
 530:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
 532:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
 534:	e1 99       	sbic	0x1c, 1	; 28
 536:	fe cf       	rjmp	.-4      	; 0x534 <EEPROM_write+0xa>
	
}
 538:	08 95       	ret

0000053a <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
 53a:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 53c:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
 53e:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
 540:	8d b3       	in	r24, 0x1d	; 29
}
 542:	08 95       	ret

00000544 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	82 e4       	ldi	r24, 0x42	; 66
 54a:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	8f e9       	ldi	r24, 0x9F	; 159
 550:	9f e0       	ldi	r25, 0x0F	; 15
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <send_falling_edge+0xe>
 556:	00 c0       	rjmp	.+0      	; 0x558 <send_falling_edge+0x14>
 558:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	82 e4       	ldi	r24, 0x42	; 66
 560:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 564:	8f e9       	ldi	r24, 0x9F	; 159
 566:	9f e0       	ldi	r25, 0x0F	; 15
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <send_falling_edge+0x24>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <send_falling_edge+0x2a>
 56e:	00 00       	nop
 570:	08 95       	ret

00000572 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 572:	68 2f       	mov	r22, r24
 574:	81 e4       	ldi	r24, 0x41	; 65
 576:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write_port>
	DIO_write('B',RS,0);
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	82 e4       	ldi	r24, 0x42	; 66
 580:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
	send_falling_edge();
 584:	0e 94 a2 02 	call	0x544	; 0x544 <send_falling_edge>
 588:	8f ec       	ldi	r24, 0xCF	; 207
 58a:	97 e0       	ldi	r25, 0x07	; 7
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_vSend_cmd+0x1a>
 590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_vSend_cmd+0x20>
 592:	00 00       	nop
 594:	08 95       	ret

00000596 <LCD_vInit>:
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	81 ee       	ldi	r24, 0xE1	; 225
 59a:	94 e0       	ldi	r25, 0x04	; 4
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <LCD_vInit+0x6>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_vInit+0x10>
 5a6:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	81 e4       	ldi	r24, 0x41	; 65
 5ae:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	81 e4       	ldi	r24, 0x41	; 65
 5b8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	81 e4       	ldi	r24, 0x41	; 65
 5c2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	81 e4       	ldi	r24, 0x41	; 65
 5cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	81 e4       	ldi	r24, 0x41	; 65
 5d6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	65 e0       	ldi	r22, 0x05	; 5
 5de:	81 e4       	ldi	r24, 0x41	; 65
 5e0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	66 e0       	ldi	r22, 0x06	; 6
 5e8:	81 e4       	ldi	r24, 0x41	; 65
 5ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	67 e0       	ldi	r22, 0x07	; 7
 5f2:	81 e4       	ldi	r24, 0x41	; 65
 5f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	82 e4       	ldi	r24, 0x42	; 66
 5fe:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	82 e4       	ldi	r24, 0x42	; 66
 608:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	82 e4       	ldi	r24, 0x42	; 66
 612:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	62 e0       	ldi	r22, 0x02	; 2
 61a:	82 e4       	ldi	r24, 0x42	; 66
 61c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 620:	88 e3       	ldi	r24, 0x38	; 56
 622:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vSend_cmd>
 626:	8f ec       	ldi	r24, 0xCF	; 207
 628:	97 e0       	ldi	r25, 0x07	; 7
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_vInit+0x94>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_vInit+0x9a>
 630:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 632:	8e e0       	ldi	r24, 0x0E	; 14
 634:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vSend_cmd>
 638:	8f ec       	ldi	r24, 0xCF	; 207
 63a:	97 e0       	ldi	r25, 0x07	; 7
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <LCD_vInit+0xa6>
 640:	00 c0       	rjmp	.+0      	; 0x642 <LCD_vInit+0xac>
 642:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vSend_cmd>
 64a:	8f e1       	ldi	r24, 0x1F	; 31
 64c:	9e e4       	ldi	r25, 0x4E	; 78
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <LCD_vInit+0xb8>
 652:	00 c0       	rjmp	.+0      	; 0x654 <LCD_vInit+0xbe>
 654:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 656:	86 e0       	ldi	r24, 0x06	; 6
 658:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vSend_cmd>
 65c:	8f ec       	ldi	r24, 0xCF	; 207
 65e:	97 e0       	ldi	r25, 0x07	; 7
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <LCD_vInit+0xca>
 664:	00 c0       	rjmp	.+0      	; 0x666 <LCD_vInit+0xd0>
 666:	00 00       	nop
 668:	08 95       	ret

0000066a <LCD_vSend_char>:
}

void LCD_vSend_char(char data)
{
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 66a:	68 2f       	mov	r22, r24
 66c:	81 e4       	ldi	r24, 0x41	; 65
 66e:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write_port>
	DIO_write('B',RS,1);
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	82 e4       	ldi	r24, 0x42	; 66
 678:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
	send_falling_edge();
 67c:	0e 94 a2 02 	call	0x544	; 0x544 <send_falling_edge>
 680:	8f ec       	ldi	r24, 0xCF	; 207
 682:	97 e0       	ldi	r25, 0x07	; 7
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <LCD_vSend_char+0x1a>
 688:	00 c0       	rjmp	.+0      	; 0x68a <LCD_vSend_char+0x20>
 68a:	00 00       	nop
 68c:	08 95       	ret

0000068e <LCD_vSend_string>:
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
{
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 694:	88 81       	ld	r24, Y
 696:	88 23       	and	r24, r24
 698:	31 f0       	breq	.+12     	; 0x6a6 <LCD_vSend_string+0x18>
 69a:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSend_char(*data);
 69c:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 6a0:	89 91       	ld	r24, Y+
 6a2:	81 11       	cpse	r24, r1
 6a4:	fb cf       	rjmp	.-10     	; 0x69c <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vSend_cmd>
 6b2:	8f e1       	ldi	r24, 0x1F	; 31
 6b4:	9e e4       	ldi	r25, 0x4E	; 78
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_clearscreen+0xa>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_clearscreen+0x10>
 6bc:	00 00       	nop
 6be:	08 95       	ret

000006c0 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	98 0f       	add	r25, r24
 6c4:	92 30       	cpi	r25, 0x02	; 2
 6c6:	70 f4       	brcc	.+28     	; 0x6e4 <LCD_movecursor+0x24>
 6c8:	9f ef       	ldi	r25, 0xFF	; 255
 6ca:	96 0f       	add	r25, r22
 6cc:	90 31       	cpi	r25, 0x10	; 16
 6ce:	60 f4       	brcc	.+24     	; 0x6e8 <LCD_movecursor+0x28>
	{
		data=0x80;
	}
	else if(row==1)
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	19 f4       	brne	.+6      	; 0x6da <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 6d4:	2f e7       	ldi	r18, 0x7F	; 127
 6d6:	26 0f       	add	r18, r22
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <LCD_movecursor+0x2a>
	}
	else if (row==2)
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	31 f4       	brne	.+12     	; 0x6ea <LCD_movecursor+0x2a>
	{
		data=0xc0+coloumn-1;
 6de:	2f eb       	ldi	r18, 0xBF	; 191
 6e0:	26 0f       	add	r18, r22
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <LCD_movecursor+0x2a>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 6e4:	20 e8       	ldi	r18, 0x80	; 128
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <LCD_movecursor+0x2a>
 6e8:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 6ea:	82 2f       	mov	r24, r18
 6ec:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vSend_cmd>
 6f0:	8f ec       	ldi	r24, 0xCF	; 207
 6f2:	97 e0       	ldi	r25, 0x07	; 7
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <LCD_movecursor+0x34>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <LCD_movecursor+0x3a>
 6fa:	00 00       	nop
 6fc:	08 95       	ret

000006fe <main>:
#define  EEPROM_PASSWORD_LOCATION4 0x24
#define MAX_TRIES 2

char arr[4];
int main(void)
{
 6fe:	df 92       	push	r13
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
		char value=NOTPRESSED;
		char flag=0,i;
		char tries=MAX_TRIES;
		//EEPROM_write(EEPROM_STATUS_LOCATION,0xff);
		keypad_vInit();
 70c:	0e 94 49 00 	call	0x92	; 0x92 <keypad_vInit>
		LCD_vInit();
 710:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_vInit>
		if (EEPROM_read(EEPROM_STATUS_LOCATION)==NOTPRESSED)
 714:	80 e2       	ldi	r24, 0x20	; 32
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 9d 02 	call	0x53a	; 0x53a <EEPROM_read>
 71c:	8f 3f       	cpi	r24, 0xFF	; 255
 71e:	91 05       	cpc	r25, r1
 720:	09 f0       	breq	.+2      	; 0x724 <main+0x26>
 722:	d6 c0       	rjmp	.+428    	; 0x8d0 <__stack+0x71>
		{
			LCD_vSend_string("set pass:");
 724:	80 e7       	ldi	r24, 0x70	; 112
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
 72c:	01 e2       	ldi	r16, 0x21	; 33
 72e:	10 e0       	ldi	r17, 0x00	; 0
			for (i=0;i<=3;i++)
			{
				do
				{
					value=keypad_u8check_press();
 730:	0e 94 86 00 	call	0x10c	; 0x10c <keypad_u8check_press>
 734:	c8 2f       	mov	r28, r24
				}while (value==NOTPRESSED);
 736:	8f 3f       	cpi	r24, 0xFF	; 255
 738:	d9 f3       	breq	.-10     	; 0x730 <main+0x32>
				LCD_vSend_char(value);
 73a:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_vSend_char>
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	84 e3       	ldi	r24, 0x34	; 52
 742:	9c e0       	ldi	r25, 0x0C	; 12
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x46>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x50>
 74e:	00 00       	nop
				_delay_ms(500);
				LCD_movecursor(1,10+i);
 750:	69 ee       	ldi	r22, 0xE9	; 233
 752:	60 0f       	add	r22, r16
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
				LCD_vSend_char('*');
 75a:	8a e2       	ldi	r24, 0x2A	; 42
 75c:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_vSend_char>
 760:	ef ef       	ldi	r30, 0xFF	; 255
 762:	f4 e3       	ldi	r31, 0x34	; 52
 764:	2c e0       	ldi	r18, 0x0C	; 12
 766:	e1 50       	subi	r30, 0x01	; 1
 768:	f0 40       	sbci	r31, 0x00	; 0
 76a:	20 40       	sbci	r18, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <main+0x68>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0x72>
 770:	00 00       	nop
				_delay_ms(500);
				EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
 772:	6c 2f       	mov	r22, r28
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	c8 01       	movw	r24, r16
 778:	0e 94 95 02 	call	0x52a	; 0x52a <EEPROM_write>
 77c:	0f 5f       	subi	r16, 0xFF	; 255
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
		keypad_vInit();
		LCD_vInit();
		if (EEPROM_read(EEPROM_STATUS_LOCATION)==NOTPRESSED)
		{
			LCD_vSend_string("set pass:");
			for (i=0;i<=3;i++)
 780:	05 32       	cpi	r16, 0x25	; 37
 782:	11 05       	cpc	r17, r1
 784:	a9 f6       	brne	.-86     	; 0x730 <main+0x32>
				LCD_movecursor(1,10+i);
				LCD_vSend_char('*');
				_delay_ms(500);
				EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
			}
			EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 95 02 	call	0x52a	; 0x52a <EEPROM_write>
 792:	9e c0       	rjmp	.+316    	; 0x8d0 <__stack+0x71>
		}				
    while(flag==0)
    {
		arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;
 794:	f7 01       	movw	r30, r14
 796:	03 83       	std	Z+3, r16	; 0x03
 798:	02 83       	std	Z+2, r16	; 0x02
 79a:	01 83       	std	Z+1, r16	; 0x01
 79c:	00 83       	st	Z, r16
		LCD_clearscreen();
 79e:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_vSend_string("check pass:");
 7a2:	8a e7       	ldi	r24, 0x7A	; 122
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
 7aa:	c8 ec       	ldi	r28, 0xC8	; 200
 7ac:	d0 e0       	ldi	r29, 0x00	; 0
 7ae:	1c e0       	ldi	r17, 0x0C	; 12
		for (i=0;i<=3;i++)
		{
			do
			{
				arr[i]=keypad_u8check_press();
 7b0:	0e 94 86 00 	call	0x10c	; 0x10c <keypad_u8check_press>
 7b4:	88 83       	st	Y, r24
			}while (arr[i]==NOTPRESSED);
 7b6:	8f 3f       	cpi	r24, 0xFF	; 255
 7b8:	d9 f3       	breq	.-10     	; 0x7b0 <main+0xb2>
			LCD_vSend_char(arr[i]);
 7ba:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_vSend_char>
 7be:	ff ef       	ldi	r31, 0xFF	; 255
 7c0:	24 e3       	ldi	r18, 0x34	; 52
 7c2:	8c e0       	ldi	r24, 0x0C	; 12
 7c4:	f1 50       	subi	r31, 0x01	; 1
 7c6:	20 40       	sbci	r18, 0x00	; 0
 7c8:	80 40       	sbci	r24, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0xc6>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <main+0xd0>
 7ce:	00 00       	nop
			_delay_ms(500);
			LCD_movecursor(1,12+i);
 7d0:	61 2f       	mov	r22, r17
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
			LCD_vSend_char('*');
 7d8:	8a e2       	ldi	r24, 0x2A	; 42
 7da:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_vSend_char>
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	e4 e3       	ldi	r30, 0x34	; 52
 7e2:	fc e0       	ldi	r31, 0x0C	; 12
 7e4:	91 50       	subi	r25, 0x01	; 1
 7e6:	e0 40       	sbci	r30, 0x00	; 0
 7e8:	f0 40       	sbci	r31, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0xe6>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0xf0>
 7ee:	00 00       	nop
 7f0:	1f 5f       	subi	r17, 0xFF	; 255
 7f2:	21 96       	adiw	r28, 0x01	; 1
    while(flag==0)
    {
		arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;
		LCD_clearscreen();
		LCD_vSend_string("check pass:");
		for (i=0;i<=3;i++)
 7f4:	10 31       	cpi	r17, 0x10	; 16
 7f6:	e1 f6       	brne	.-72     	; 0x7b0 <main+0xb2>
			LCD_movecursor(1,12+i);
			LCD_vSend_char('*');
			_delay_ms(500);
		}		
		
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1]
 7f8:	81 e2       	ldi	r24, 0x21	; 33
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 9d 02 	call	0x53a	; 0x53a <EEPROM_read>
 800:	f7 01       	movw	r30, r14
 802:	20 81       	ld	r18, Z
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	82 17       	cp	r24, r18
 808:	93 07       	cpc	r25, r19
 80a:	69 f5       	brne	.+90     	; 0x866 <__stack+0x7>
 80c:	82 e2       	ldi	r24, 0x22	; 34
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 9d 02 	call	0x53a	; 0x53a <EEPROM_read>
 814:	f7 01       	movw	r30, r14
 816:	21 81       	ldd	r18, Z+1	; 0x01
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	82 17       	cp	r24, r18
 81c:	93 07       	cpc	r25, r19
 81e:	19 f5       	brne	.+70     	; 0x866 <__stack+0x7>
		&& EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2] && EEPROM_read(EEPROM_PASSWORD_LOCATION4)==arr[3])
 820:	83 e2       	ldi	r24, 0x23	; 35
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 9d 02 	call	0x53a	; 0x53a <EEPROM_read>
 828:	f7 01       	movw	r30, r14
 82a:	22 81       	ldd	r18, Z+2	; 0x02
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	82 17       	cp	r24, r18
 830:	93 07       	cpc	r25, r19
 832:	c9 f4       	brne	.+50     	; 0x866 <__stack+0x7>
 834:	84 e2       	ldi	r24, 0x24	; 36
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 9d 02 	call	0x53a	; 0x53a <EEPROM_read>
 83c:	f7 01       	movw	r30, r14
 83e:	23 81       	ldd	r18, Z+3	; 0x03
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	82 17       	cp	r24, r18
 844:	93 07       	cpc	r25, r19
 846:	79 f4       	brne	.+30     	; 0x866 <__stack+0x7>
		{
			LCD_clearscreen();
 848:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
			LCD_vSend_string("right password");
 84c:	86 e8       	ldi	r24, 0x86	; 134
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
			LCD_movecursor(2,1);
 854:	61 e0       	ldi	r22, 0x01	; 1
 856:	82 e0       	ldi	r24, 0x02	; 2
 858:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
			LCD_vSend_string("safe opened");
 85c:	85 e9       	ldi	r24, 0x95	; 149
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
			flag=1;
 864:	41 c0       	rjmp	.+130    	; 0x8e8 <__stack+0x89>
		}
		else
		{
			tries=tries-1;
			if (tries>0)
 866:	f0 e3       	ldi	r31, 0x30	; 48
 868:	df 16       	cp	r13, r31
 86a:	19 f1       	breq	.+70     	; 0x8b2 <__stack+0x53>
			{
				LCD_clearscreen();
 86c:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
				LCD_vSend_string("wrong password");
 870:	81 ea       	ldi	r24, 0xA1	; 161
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
 878:	2f ef       	ldi	r18, 0xFF	; 255
 87a:	89 e6       	ldi	r24, 0x69	; 105
 87c:	98 e1       	ldi	r25, 0x18	; 24
 87e:	21 50       	subi	r18, 0x01	; 1
 880:	80 40       	sbci	r24, 0x00	; 0
 882:	90 40       	sbci	r25, 0x00	; 0
 884:	e1 f7       	brne	.-8      	; 0x87e <__stack+0x1f>
 886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
 888:	00 00       	nop
				_delay_ms(1000);
				LCD_clearscreen();
 88a:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
				LCD_vSend_string("tries left:");
 88e:	80 eb       	ldi	r24, 0xB0	; 176
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
				LCD_vSend_char(tries+48);
 896:	8d 2d       	mov	r24, r13
 898:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_vSend_char>
 89c:	ef ef       	ldi	r30, 0xFF	; 255
 89e:	f9 e6       	ldi	r31, 0x69	; 105
 8a0:	28 e1       	ldi	r18, 0x18	; 24
 8a2:	e1 50       	subi	r30, 0x01	; 1
 8a4:	f0 40       	sbci	r31, 0x00	; 0
 8a6:	20 40       	sbci	r18, 0x00	; 0
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <__stack+0x4d>
 8ac:	00 00       	nop
 8ae:	da 94       	dec	r13
 8b0:	71 cf       	rjmp	.-286    	; 0x794 <main+0x96>
				_delay_ms(1000);
				
			}
			else
			{
				LCD_clearscreen();
 8b2:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
				LCD_vSend_string("wrong password");
 8b6:	81 ea       	ldi	r24, 0xA1	; 161
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
				LCD_movecursor(2,1);
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
				LCD_vSend_string("safe closed");
 8c6:	8c eb       	ldi	r24, 0xBC	; 188
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_vSend_string>
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <__stack+0x89>
		//EEPROM_write(EEPROM_STATUS_LOCATION,0xff);
		keypad_vInit();
		LCD_vInit();
		if (EEPROM_read(EEPROM_STATUS_LOCATION)==NOTPRESSED)
		{
			LCD_vSend_string("set pass:");
 8d0:	0f 2e       	mov	r0, r31
 8d2:	f1 e3       	ldi	r31, 0x31	; 49
 8d4:	df 2e       	mov	r13, r31
 8d6:	f0 2d       	mov	r31, r0
			}
			EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
		}				
    while(flag==0)
    {
		arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;
 8d8:	0f 2e       	mov	r0, r31
 8da:	f8 ec       	ldi	r31, 0xC8	; 200
 8dc:	ef 2e       	mov	r14, r31
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	ff 2e       	mov	r15, r31
 8e2:	f0 2d       	mov	r31, r0
 8e4:	0f ef       	ldi	r16, 0xFF	; 255
 8e6:	56 cf       	rjmp	.-340    	; 0x794 <main+0x96>
				LCD_vSend_string("safe closed");
				flag=1;
			}
		}
	}			
}
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	ff 90       	pop	r15
 8f6:	ef 90       	pop	r14
 8f8:	df 90       	pop	r13
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
