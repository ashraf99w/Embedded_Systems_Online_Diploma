
ReadWrite_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cdb  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000757  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000789  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000973  00000000  00000000  000026d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	8a 00       	.word	0x008a	; ????
  56:	a3 00       	.word	0x00a3	; ????
  58:	bc 00       	.word	0x00bc	; ????
  5a:	d5 00       	.word	0x00d5	; ????
  5c:	ed 00       	.word	0x00ed	; ????
  5e:	ed 00       	.word	0x00ed	; ????
  60:	ed 00       	.word	0x00ed	; ????
  62:	ed 00       	.word	0x00ed	; ????
  64:	ed 00       	.word	0x00ed	; ????
  66:	ed 00       	.word	0x00ed	; ????
  68:	ed 00       	.word	0x00ed	; ????
  6a:	ed 00       	.word	0x00ed	; ????
  6c:	ed 00       	.word	0x00ed	; ????
  6e:	ed 00       	.word	0x00ed	; ????
  70:	ed 00       	.word	0x00ed	; ????
  72:	ed 00       	.word	0x00ed	; ????
  74:	ed 00       	.word	0x00ed	; ????
  76:	ed 00       	.word	0x00ed	; ????
  78:	ed 00       	.word	0x00ed	; ????
  7a:	ed 00       	.word	0x00ed	; ????
  7c:	ed 00       	.word	0x00ed	; ????
  7e:	ed 00       	.word	0x00ed	; ????
  80:	ed 00       	.word	0x00ed	; ????
  82:	ed 00       	.word	0x00ed	; ????
  84:	ed 00       	.word	0x00ed	; ????
  86:	ed 00       	.word	0x00ed	; ????
  88:	ed 00       	.word	0x00ed	; ????
  8a:	ed 00       	.word	0x00ed	; ????
  8c:	ed 00       	.word	0x00ed	; ????
  8e:	ed 00       	.word	0x00ed	; ????
  90:	ed 00       	.word	0x00ed	; ????
  92:	ed 00       	.word	0x00ed	; ????
  94:	8a 00       	.word	0x008a	; ????
  96:	a3 00       	.word	0x00a3	; ????
  98:	bc 00       	.word	0x00bc	; ????
  9a:	d5 00       	.word	0x00d5	; ????
  9c:	fa 00       	.word	0x00fa	; ????
  9e:	13 01       	movw	r2, r6
  a0:	2c 01       	movw	r4, r24
  a2:	45 01       	movw	r8, r10
  a4:	5d 01       	movw	r10, r26
  a6:	5d 01       	movw	r10, r26
  a8:	5d 01       	movw	r10, r26
  aa:	5d 01       	movw	r10, r26
  ac:	5d 01       	movw	r10, r26
  ae:	5d 01       	movw	r10, r26
  b0:	5d 01       	movw	r10, r26
  b2:	5d 01       	movw	r10, r26
  b4:	5d 01       	movw	r10, r26
  b6:	5d 01       	movw	r10, r26
  b8:	5d 01       	movw	r10, r26
  ba:	5d 01       	movw	r10, r26
  bc:	5d 01       	movw	r10, r26
  be:	5d 01       	movw	r10, r26
  c0:	5d 01       	movw	r10, r26
  c2:	5d 01       	movw	r10, r26
  c4:	5d 01       	movw	r10, r26
  c6:	5d 01       	movw	r10, r26
  c8:	5d 01       	movw	r10, r26
  ca:	5d 01       	movw	r10, r26
  cc:	5d 01       	movw	r10, r26
  ce:	5d 01       	movw	r10, r26
  d0:	5d 01       	movw	r10, r26
  d2:	5d 01       	movw	r10, r26
  d4:	5d 01       	movw	r10, r26
  d6:	5d 01       	movw	r10, r26
  d8:	5d 01       	movw	r10, r26
  da:	5d 01       	movw	r10, r26
  dc:	fa 00       	.word	0x00fa	; ????
  de:	13 01       	movw	r2, r6
  e0:	2c 01       	movw	r4, r24
  e2:	45 01       	movw	r8, r10

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  f4:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <Dio_vSetPinDir>:
#include <avr/io.h>
#include "Macros.h"

void Dio_vSetPinDir(unsigned char port,unsigned char pin ,unsigned char direction)
{
	switch(port)
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	e1 54       	subi	r30, 0x41	; 65
 102:	f1 09       	sbc	r31, r1
 104:	e4 32       	cpi	r30, 0x24	; 36
 106:	f1 05       	cpc	r31, r1
 108:	08 f0       	brcs	.+2      	; 0x10c <Dio_vSetPinDir+0x10>
 10a:	67 c0       	rjmp	.+206    	; 0x1da <Dio_vSetPinDir+0xde>
 10c:	e6 5d       	subi	r30, 0xD6	; 214
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__tablejump2__>
	{
		// FOR PORT A
		case 'A':
		case 'a':
			if(direction==1)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <Dio_vSetPinDir+0x32>
			{Set_bit(DDRA,pin);}
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Dio_vSetPinDir+0x28>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <Dio_vSetPinDir+0x24>
 128:	82 2b       	or	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26
 12c:	08 95       	ret
			
			else
			{Clear_bit(DDRA,pin);}
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <Dio_vSetPinDir+0x3e>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <Dio_vSetPinDir+0x3a>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	8a bb       	out	0x1a, r24	; 26
 144:	08 95       	ret
           break;
			
		// FOR PORT B
		case 'b':
		case 'B':
			if(direction==1)
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	59 f4       	brne	.+22     	; 0x160 <Dio_vSetPinDir+0x64>
			{Set_bit(DDRB,pin);}
 14a:	27 b3       	in	r18, 0x17	; 23
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <Dio_vSetPinDir+0x5a>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <Dio_vSetPinDir+0x56>
 15a:	82 2b       	or	r24, r18
 15c:	87 bb       	out	0x17, r24	; 23
 15e:	08 95       	ret

			else
			{Clear_bit(DDRB,pin);}
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <Dio_vSetPinDir+0x70>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <Dio_vSetPinDir+0x6c>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	87 bb       	out	0x17, r24	; 23
 176:	08 95       	ret
			break;
			
		// FOR PORT C
		case 'C':
		case 'c':
			if(direction==1)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	59 f4       	brne	.+22     	; 0x192 <Dio_vSetPinDir+0x96>
			{Set_bit(DDRC,pin);}
 17c:	24 b3       	in	r18, 0x14	; 20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <Dio_vSetPinDir+0x8c>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <Dio_vSetPinDir+0x88>
 18c:	82 2b       	or	r24, r18
 18e:	84 bb       	out	0x14, r24	; 20
 190:	08 95       	ret
			else
			{Clear_bit(DDRC,pin);}
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <Dio_vSetPinDir+0xa2>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Dio_vSetPinDir+0x9e>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	84 bb       	out	0x14, r24	; 20
 1a8:	08 95       	ret
			break;
		
        // FOR PORT D
        case 'D':
        case 'd':
			if(direction==1)
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <Dio_vSetPinDir+0xc8>
			{Set_bit(DDRD,pin);}
 1ae:	21 b3       	in	r18, 0x11	; 17
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_vSetPinDir+0xbe>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_vSetPinDir+0xba>
 1be:	82 2b       	or	r24, r18
 1c0:	81 bb       	out	0x11, r24	; 17
 1c2:	08 95       	ret
			else
			{Clear_bit(DDRD,pin);}
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Dio_vSetPinDir+0xd4>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <Dio_vSetPinDir+0xd0>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	08 95       	ret

000001dc <DIO_vWrite_pin>:
	}
}

void DIO_vWrite_pin(unsigned char port,unsigned char pin,unsigned char value)
{
	switch(port)
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	e1 54       	subi	r30, 0x41	; 65
 1e2:	f1 09       	sbc	r31, r1
 1e4:	e4 32       	cpi	r30, 0x24	; 36
 1e6:	f1 05       	cpc	r31, r1
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_vWrite_pin+0x10>
 1ea:	67 c0       	rjmp	.+206    	; 0x2ba <DIO_vWrite_pin+0xde>
 1ec:	e2 5b       	subi	r30, 0xB2	; 178
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__tablejump2__>
	{
		// FOR PORT A
		case 'A':
		case 'a':
			if(value==1)
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_vWrite_pin+0x32>
			{Set_bit(PORTA,pin);}
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_vWrite_pin+0x28>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_vWrite_pin+0x24>
 208:	82 2b       	or	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27
 20c:	08 95       	ret
		
			else
			{Clear_bit(PORTA,pin);}
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWrite_pin+0x3e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWrite_pin+0x3a>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	8b bb       	out	0x1b, r24	; 27
 224:	08 95       	ret
			break;
		
		// FOR PORT B
		case 'b':
		case 'B':
			if(value==1)
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	59 f4       	brne	.+22     	; 0x240 <DIO_vWrite_pin+0x64>
			{Set_bit(PORTB,pin);}
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_vWrite_pin+0x5a>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_vWrite_pin+0x56>
 23a:	82 2b       	or	r24, r18
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	08 95       	ret

			else
			{Clear_bit(PORTB,pin);}
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vWrite_pin+0x70>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vWrite_pin+0x6c>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	08 95       	ret
			break;

		// FOR PORT C
		case 'C':
		case 'c':
			if(value==1)
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	59 f4       	brne	.+22     	; 0x272 <DIO_vWrite_pin+0x96>
			{Set_bit(PORTC,pin);}
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_vWrite_pin+0x8c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_vWrite_pin+0x88>
 26c:	82 2b       	or	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
 270:	08 95       	ret
			else
			{Clear_bit(PORTC,pin);}
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vWrite_pin+0xa2>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vWrite_pin+0x9e>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	85 bb       	out	0x15, r24	; 21
 288:	08 95       	ret
			break;
		
		// FOR PORT D
		case 'D':
		case 'd':
			if(value==1)
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <DIO_vWrite_pin+0xc8>
			{Set_bit(PORTD,pin);}
 28e:	22 b3       	in	r18, 0x12	; 18
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_vWrite_pin+0xbe>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_vWrite_pin+0xba>
 29e:	82 2b       	or	r24, r18
 2a0:	82 bb       	out	0x12, r24	; 18
 2a2:	08 95       	ret
			else
			{Clear_bit(PORTD,pin);}
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWrite_pin+0xd4>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWrite_pin+0xd0>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	08 95       	ret

000002bc <EEPROM_vWRITE>:


void EEPROM_vWRITE(unsigned short address,unsigned char data)
{
	/*set up address register*/
	EEARL=(char)address;
 2bc:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 2be:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
 2c0:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	Set_bit(EECR,EEMWE);
 2c2:	8c b3       	in	r24, 0x1c	; 28
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	8c bb       	out	0x1c, r24	; 28
	/*start EEPROM write by setting EEWE*/
	Set_bit(EECR,EEWE);
 2c8:	8c b3       	in	r24, 0x1c	; 28
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	8c bb       	out	0x1c, r24	; 28
	/* wait for completion of  write operation */
	while(Read_bit(EECR,EEWE)==1);
 2ce:	e1 99       	sbic	0x1c, 1	; 28
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <EEPROM_vWRITE+0x12>

}
 2d2:	08 95       	ret

000002d4 <EEPROM_vREAD>:
unsigned char EEPROM_vREAD(unsigned short address)
{
	/*set up address register*/
	EEARL=(char)address;
 2d4:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 2d6:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	Set_bit(EECR,EERE);
 2d8:	8c b3       	in	r24, 0x1c	; 28
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	8c bb       	out	0x1c, r24	; 28
	/*return data from data register*/
	return EEDR ;
 2de:	8d b3       	in	r24, 0x1d	; 29

 2e0:	08 95       	ret

000002e2 <LED_vInit>:
 */ 
#include "Dio.h"

void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	Dio_vSetPinDir(portname,pinnumber,1);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	0e 94 7e 00 	call	0xfc	; 0xfc <Dio_vSetPinDir>
 2e8:	08 95       	ret

000002ea <LED_vTurnOn>:



void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_vWrite_pin(portname,pinnumber,1);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vWrite_pin>
 2f0:	08 95       	ret

000002f2 <main>:
#include "LED.h"


int main(void)
{
	LED_vInit('a',0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	81 e6       	ldi	r24, 0x61	; 97
 2f6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_vInit>
    EEPROM_vWRITE(0x55,0x23);
 2fa:	63 e2       	ldi	r22, 0x23	; 35
 2fc:	85 e5       	ldi	r24, 0x55	; 85
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 5e 01 	call	0x2bc	; 0x2bc <EEPROM_vWRITE>
	EEPROM_vWRITE(0x56,0x25);
 304:	65 e2       	ldi	r22, 0x25	; 37
 306:	86 e5       	ldi	r24, 0x56	; 86
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <EEPROM_vWRITE>
	EEPROM_vWRITE(0x57,0x30);
 30e:	60 e3       	ldi	r22, 0x30	; 48
 310:	87 e5       	ldi	r24, 0x57	; 87
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 5e 01 	call	0x2bc	; 0x2bc <EEPROM_vWRITE>
	unsigned char x,y,z;
	x=EEPROM_vREAD(0x55);
 318:	85 e5       	ldi	r24, 0x55	; 85
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <EEPROM_vREAD>
 320:	d8 2f       	mov	r29, r24
	y=EEPROM_vREAD(0x56);
 322:	86 e5       	ldi	r24, 0x56	; 86
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <EEPROM_vREAD>
 32a:	c8 2f       	mov	r28, r24
	z=EEPROM_vREAD(0x57);
 32c:	87 e5       	ldi	r24, 0x57	; 87
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <EEPROM_vREAD>
	if (x==0x23 && y==0x25 && z==0x30)
 334:	d3 32       	cpi	r29, 0x23	; 35
 336:	41 f4       	brne	.+16     	; 0x348 <main+0x56>
 338:	c5 32       	cpi	r28, 0x25	; 37
 33a:	31 f4       	brne	.+12     	; 0x348 <main+0x56>
 33c:	80 33       	cpi	r24, 0x30	; 48
 33e:	21 f4       	brne	.+8      	; 0x348 <main+0x56>
	{
		LED_vTurnOn('a',0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	81 e6       	ldi	r24, 0x61	; 97
 344:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_vTurnOn>
 348:	ff cf       	rjmp	.-2      	; 0x348 <main+0x56>

0000034a <__tablejump2__>:
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	05 90       	lpm	r0, Z+
 350:	f4 91       	lpm	r31, Z
 352:	e0 2d       	mov	r30, r0
 354:	09 94       	ijmp

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
