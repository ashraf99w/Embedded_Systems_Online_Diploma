
slide_8_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dfb  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081c  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e8  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d2  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000adc  00000000  00000000  00002d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003816  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_16>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	fa 00       	.word	0x00fa	; ????
  56:	13 01       	movw	r2, r6
  58:	2c 01       	movw	r4, r24
  5a:	45 01       	movw	r8, r10
  5c:	5d 01       	movw	r10, r26
  5e:	5d 01       	movw	r10, r26
  60:	5d 01       	movw	r10, r26
  62:	5d 01       	movw	r10, r26
  64:	5d 01       	movw	r10, r26
  66:	5d 01       	movw	r10, r26
  68:	5d 01       	movw	r10, r26
  6a:	5d 01       	movw	r10, r26
  6c:	5d 01       	movw	r10, r26
  6e:	5d 01       	movw	r10, r26
  70:	5d 01       	movw	r10, r26
  72:	5d 01       	movw	r10, r26
  74:	5d 01       	movw	r10, r26
  76:	5d 01       	movw	r10, r26
  78:	5d 01       	movw	r10, r26
  7a:	5d 01       	movw	r10, r26
  7c:	5d 01       	movw	r10, r26
  7e:	5d 01       	movw	r10, r26
  80:	5d 01       	movw	r10, r26
  82:	5d 01       	movw	r10, r26
  84:	5d 01       	movw	r10, r26
  86:	5d 01       	movw	r10, r26
  88:	5d 01       	movw	r10, r26
  8a:	5d 01       	movw	r10, r26
  8c:	5d 01       	movw	r10, r26
  8e:	5d 01       	movw	r10, r26
  90:	5d 01       	movw	r10, r26
  92:	5d 01       	movw	r10, r26
  94:	fa 00       	.word	0x00fa	; ????
  96:	13 01       	movw	r2, r6
  98:	2c 01       	movw	r4, r24
  9a:	45 01       	movw	r8, r10
  9c:	6a 01       	movw	r12, r20
  9e:	83 01       	movw	r16, r6
  a0:	9c 01       	movw	r18, r24
  a2:	b5 01       	movw	r22, r10
  a4:	cd 01       	movw	r24, r26
  a6:	cd 01       	movw	r24, r26
  a8:	cd 01       	movw	r24, r26
  aa:	cd 01       	movw	r24, r26
  ac:	cd 01       	movw	r24, r26
  ae:	cd 01       	movw	r24, r26
  b0:	cd 01       	movw	r24, r26
  b2:	cd 01       	movw	r24, r26
  b4:	cd 01       	movw	r24, r26
  b6:	cd 01       	movw	r24, r26
  b8:	cd 01       	movw	r24, r26
  ba:	cd 01       	movw	r24, r26
  bc:	cd 01       	movw	r24, r26
  be:	cd 01       	movw	r24, r26
  c0:	cd 01       	movw	r24, r26
  c2:	cd 01       	movw	r24, r26
  c4:	cd 01       	movw	r24, r26
  c6:	cd 01       	movw	r24, r26
  c8:	cd 01       	movw	r24, r26
  ca:	cd 01       	movw	r24, r26
  cc:	cd 01       	movw	r24, r26
  ce:	cd 01       	movw	r24, r26
  d0:	cd 01       	movw	r24, r26
  d2:	cd 01       	movw	r24, r26
  d4:	cd 01       	movw	r24, r26
  d6:	cd 01       	movw	r24, r26
  d8:	cd 01       	movw	r24, r26
  da:	cd 01       	movw	r24, r26
  dc:	6a 01       	movw	r12, r20
  de:	83 01       	movw	r16, r6
  e0:	9c 01       	movw	r18, r24
  e2:	b5 01       	movw	r22, r10
  e4:	d9 01       	movw	r26, r18
  e6:	db 01       	movw	r26, r22
  e8:	dd 01       	movw	r26, r26
  ea:	df 01       	movw	r26, r30
  ec:	e0 01       	movw	r28, r0
  ee:	e0 01       	movw	r28, r0
  f0:	e0 01       	movw	r28, r0
  f2:	e0 01       	movw	r28, r0
  f4:	e0 01       	movw	r28, r0
  f6:	e0 01       	movw	r28, r0
  f8:	e0 01       	movw	r28, r0
  fa:	e0 01       	movw	r28, r0
  fc:	e0 01       	movw	r28, r0
  fe:	e0 01       	movw	r28, r0
 100:	e0 01       	movw	r28, r0
 102:	e0 01       	movw	r28, r0
 104:	e0 01       	movw	r28, r0
 106:	e0 01       	movw	r28, r0
 108:	e0 01       	movw	r28, r0
 10a:	e0 01       	movw	r28, r0
 10c:	e0 01       	movw	r28, r0
 10e:	e0 01       	movw	r28, r0
 110:	e0 01       	movw	r28, r0
 112:	e0 01       	movw	r28, r0
 114:	e0 01       	movw	r28, r0
 116:	e0 01       	movw	r28, r0
 118:	e0 01       	movw	r28, r0
 11a:	e0 01       	movw	r28, r0
 11c:	e0 01       	movw	r28, r0
 11e:	e0 01       	movw	r28, r0
 120:	e0 01       	movw	r28, r0
 122:	e0 01       	movw	r28, r0
 124:	d9 01       	movw	r26, r18
 126:	db 01       	movw	r26, r22
 128:	dd 01       	movw	r26, r26
 12a:	df 01       	movw	r26, r30

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
 13c:	0c 94 4d 02 	jmp	0x49a	; 0x49a <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <ADC_vinit>:
#include "Macros.h"
#include <avr/interrupt.h>
void ADC_vinit(unsigned char ref_volt,unsigned char enable_interrupt_INT0,
unsigned char enable_DIFRENTIAL_MODE,unsigned char ENABLE_ADC_INTERRUPT)
{
	switch (ref_volt)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	59 f0       	breq	.+22     	; 0x15e <ADC_vinit+0x1a>
 148:	18 f0       	brcs	.+6      	; 0x150 <ADC_vinit+0xc>
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	61 f0       	breq	.+24     	; 0x166 <ADC_vinit+0x22>
 14e:	11 c0       	rjmp	.+34     	; 0x172 <ADC_vinit+0x2e>
	{
	case 0 :  //configure AREF
		Clear_bit(ADMUX,REFS0);
 150:	87 b1       	in	r24, 0x07	; 7
 152:	8f 7b       	andi	r24, 0xBF	; 191
 154:	87 b9       	out	0x07, r24	; 7
	 	Clear_bit(ADMUX,REFS1);
 156:	87 b1       	in	r24, 0x07	; 7
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	87 b9       	out	0x07, r24	; 7
		break;
 15c:	0a c0       	rjmp	.+20     	; 0x172 <ADC_vinit+0x2e>
	
    case 1: //configure AVCC
		Set_bit(ADMUX,REFS0); 
 15e:	87 b1       	in	r24, 0x07	; 7
 160:	80 64       	ori	r24, 0x40	; 64
 162:	87 b9       	out	0x07, r24	; 7
	    break;
 164:	06 c0       	rjmp	.+12     	; 0x172 <ADC_vinit+0x2e>
	   
	case 3 ://INTERNAL 2.56 VOLT
	Set_bit(ADMUX,REFS0);
 166:	87 b1       	in	r24, 0x07	; 7
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	87 b9       	out	0x07, r24	; 7
	Set_bit(ADMUX,REFS1);
 16c:	87 b1       	in	r24, 0x07	; 7
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	87 b9       	out	0x07, r24	; 7
	
	break;
	}

	Set_bit(ADCSRA,ADEN); // enable ADC
 172:	86 b1       	in	r24, 0x06	; 6
 174:	80 68       	ori	r24, 0x80	; 128
 176:	86 b9       	out	0x06, r24	; 6
	/* adjust ADC clock*/
	Set_bit(ADCSRA,ADPS2);
 178:	86 b1       	in	r24, 0x06	; 6
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	86 b9       	out	0x06, r24	; 6
	Set_bit(ADCSRA,ADPS1);
 17e:	86 b1       	in	r24, 0x06	; 6
 180:	82 60       	ori	r24, 0x02	; 2
 182:	86 b9       	out	0x06, r24	; 6
	
	//EXTERNAL INTERRUPT REQUEST ZERO
	if (1==enable_interrupt_INT0)
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	31 f4       	brne	.+12     	; 0x194 <ADC_vinit+0x50>
	{
		Set_bit(ADCSRA,ADATE);
 188:	86 b1       	in	r24, 0x06	; 6
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	86 b9       	out	0x06, r24	; 6
		Set_bit(SFIOR,ADTS1);
 18e:	80 b7       	in	r24, 0x30	; 48
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 bf       	out	0x30, r24	; 48
	}
	if(1==enable_DIFRENTIAL_MODE)
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	79 f4       	brne	.+30     	; 0x1b6 <ADC_vinit+0x72>
	{
			/* diffrential mode */
			Clear_bit(ADMUX,MUX0);
 198:	87 b1       	in	r24, 0x07	; 7
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	87 b9       	out	0x07, r24	; 7
			Clear_bit(ADMUX,MUX1);
 19e:	87 b1       	in	r24, 0x07	; 7
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	87 b9       	out	0x07, r24	; 7
			Clear_bit(ADMUX,MUX2);
 1a4:	87 b1       	in	r24, 0x07	; 7
 1a6:	8b 7f       	andi	r24, 0xFB	; 251
 1a8:	87 b9       	out	0x07, r24	; 7
			Clear_bit(ADMUX,MUX3);
 1aa:	87 b1       	in	r24, 0x07	; 7
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	87 b9       	out	0x07, r24	; 7
			Set_bit(ADMUX,MUX4);
 1b0:	87 b1       	in	r24, 0x07	; 7
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	87 b9       	out	0x07, r24	; 7
	}
	if (1==ENABLE_ADC_INTERRUPT)
 1b6:	21 30       	cpi	r18, 0x01	; 1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <ADC_vinit+0x7e>
	{
		sei();
 1ba:	78 94       	sei
		Set_bit(ADCSRA,ADIE);
 1bc:	86 b1       	in	r24, 0x06	; 6
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	86 b9       	out	0x06, r24	; 6
 1c2:	08 95       	ret

000001c4 <ADC_u16Read>:

unsigned short ADC_u16Read(void)
{
	unsigned short read_val;
    //start  conversion
	Set_bit(ADCSRA,ADSC);
 1c4:	86 b1       	in	r24, 0x06	; 6
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	86 b9       	out	0x06, r24	; 6
	//wait till conversion complete
	while(Read_bit(ADCSRA,ADSC)==1);
 1ca:	36 99       	sbic	0x06, 6	; 6
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <ADC_u16Read+0x6>
	read_val=(ADCL);
 1ce:	24 b1       	in	r18, 0x04	; 4
	read_val|=(ADCH<<8);
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	98 2f       	mov	r25, r24
 1d6:	88 27       	eor	r24, r24
	return read_val ;
}
 1d8:	82 2b       	or	r24, r18
 1da:	08 95       	ret

000001dc <Dio_vSetPinDir>:
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	e1 54       	subi	r30, 0x41	; 65
 1e2:	f1 09       	sbc	r31, r1
 1e4:	e4 32       	cpi	r30, 0x24	; 36
 1e6:	f1 05       	cpc	r31, r1
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <Dio_vSetPinDir+0x10>
 1ea:	67 c0       	rjmp	.+206    	; 0x2ba <Dio_vSetPinDir+0xde>
 1ec:	e6 5d       	subi	r30, 0xD6	; 214
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__tablejump2__>
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <Dio_vSetPinDir+0x32>
 1f8:	2a b3       	in	r18, 0x1a	; 26
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <Dio_vSetPinDir+0x28>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <Dio_vSetPinDir+0x24>
 208:	82 2b       	or	r24, r18
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	08 95       	ret
 20e:	2a b3       	in	r18, 0x1a	; 26
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <Dio_vSetPinDir+0x3e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <Dio_vSetPinDir+0x3a>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	8a bb       	out	0x1a, r24	; 26
 224:	08 95       	ret
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	59 f4       	brne	.+22     	; 0x240 <Dio_vSetPinDir+0x64>
 22a:	27 b3       	in	r18, 0x17	; 23
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <Dio_vSetPinDir+0x5a>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <Dio_vSetPinDir+0x56>
 23a:	82 2b       	or	r24, r18
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	08 95       	ret
 240:	27 b3       	in	r18, 0x17	; 23
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <Dio_vSetPinDir+0x70>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <Dio_vSetPinDir+0x6c>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	87 bb       	out	0x17, r24	; 23
 256:	08 95       	ret
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	59 f4       	brne	.+22     	; 0x272 <Dio_vSetPinDir+0x96>
 25c:	24 b3       	in	r18, 0x14	; 20
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <Dio_vSetPinDir+0x8c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <Dio_vSetPinDir+0x88>
 26c:	82 2b       	or	r24, r18
 26e:	84 bb       	out	0x14, r24	; 20
 270:	08 95       	ret
 272:	24 b3       	in	r18, 0x14	; 20
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <Dio_vSetPinDir+0xa2>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <Dio_vSetPinDir+0x9e>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	84 bb       	out	0x14, r24	; 20
 288:	08 95       	ret
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <Dio_vSetPinDir+0xc8>
 28e:	21 b3       	in	r18, 0x11	; 17
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <Dio_vSetPinDir+0xbe>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <Dio_vSetPinDir+0xba>
 29e:	82 2b       	or	r24, r18
 2a0:	81 bb       	out	0x11, r24	; 17
 2a2:	08 95       	ret
 2a4:	21 b3       	in	r18, 0x11	; 17
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <Dio_vSetPinDir+0xd4>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <Dio_vSetPinDir+0xd0>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	81 bb       	out	0x11, r24	; 17
 2ba:	08 95       	ret

000002bc <DIO_vWrite_pin>:
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	e1 54       	subi	r30, 0x41	; 65
 2c2:	f1 09       	sbc	r31, r1
 2c4:	e4 32       	cpi	r30, 0x24	; 36
 2c6:	f1 05       	cpc	r31, r1
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <DIO_vWrite_pin+0x10>
 2ca:	67 c0       	rjmp	.+206    	; 0x39a <DIO_vWrite_pin+0xde>
 2cc:	e2 5b       	subi	r30, 0xB2	; 178
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__tablejump2__>
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	59 f4       	brne	.+22     	; 0x2ee <DIO_vWrite_pin+0x32>
 2d8:	2b b3       	in	r18, 0x1b	; 27
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_vWrite_pin+0x28>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_vWrite_pin+0x24>
 2e8:	82 2b       	or	r24, r18
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	08 95       	ret
 2ee:	2b b3       	in	r18, 0x1b	; 27
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_vWrite_pin+0x3e>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_vWrite_pin+0x3a>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	8b bb       	out	0x1b, r24	; 27
 304:	08 95       	ret
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	59 f4       	brne	.+22     	; 0x320 <DIO_vWrite_pin+0x64>
 30a:	28 b3       	in	r18, 0x18	; 24
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vWrite_pin+0x5a>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vWrite_pin+0x56>
 31a:	82 2b       	or	r24, r18
 31c:	88 bb       	out	0x18, r24	; 24
 31e:	08 95       	ret
 320:	28 b3       	in	r18, 0x18	; 24
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_vWrite_pin+0x70>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_vWrite_pin+0x6c>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	88 bb       	out	0x18, r24	; 24
 336:	08 95       	ret
 338:	41 30       	cpi	r20, 0x01	; 1
 33a:	59 f4       	brne	.+22     	; 0x352 <DIO_vWrite_pin+0x96>
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_vWrite_pin+0x8c>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_vWrite_pin+0x88>
 34c:	82 2b       	or	r24, r18
 34e:	85 bb       	out	0x15, r24	; 21
 350:	08 95       	ret
 352:	25 b3       	in	r18, 0x15	; 21
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_vWrite_pin+0xa2>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_vWrite_pin+0x9e>
 362:	80 95       	com	r24
 364:	82 23       	and	r24, r18
 366:	85 bb       	out	0x15, r24	; 21
 368:	08 95       	ret
 36a:	41 30       	cpi	r20, 0x01	; 1
 36c:	59 f4       	brne	.+22     	; 0x384 <DIO_vWrite_pin+0xc8>
 36e:	22 b3       	in	r18, 0x12	; 18
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_vWrite_pin+0xbe>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_vWrite_pin+0xba>
 37e:	82 2b       	or	r24, r18
 380:	82 bb       	out	0x12, r24	; 18
 382:	08 95       	ret
 384:	22 b3       	in	r18, 0x12	; 18
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vWrite_pin+0xd4>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vWrite_pin+0xd0>
 394:	80 95       	com	r24
 396:	82 23       	and	r24, r18
 398:	82 bb       	out	0x12, r24	; 18
 39a:	08 95       	ret

0000039c <DIO_set_port_direction>:
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	e1 54       	subi	r30, 0x41	; 65
 3a2:	f1 09       	sbc	r31, r1
 3a4:	e4 32       	cpi	r30, 0x24	; 36
 3a6:	f1 05       	cpc	r31, r1
 3a8:	58 f4       	brcc	.+22     	; 0x3c0 <DIO_set_port_direction+0x24>
 3aa:	ee 58       	subi	r30, 0x8E	; 142
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	0c 94 47 02 	jmp	0x48e	; 0x48e <__tablejump2__>
 3b2:	6a bb       	out	0x1a, r22	; 26
 3b4:	08 95       	ret
 3b6:	67 bb       	out	0x17, r22	; 23
 3b8:	08 95       	ret
 3ba:	64 bb       	out	0x14, r22	; 20
 3bc:	08 95       	ret
 3be:	61 bb       	out	0x11, r22	; 17
 3c0:	08 95       	ret

000003c2 <LED_vInit>:
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Dio_vSetPinDir>
 3c8:	08 95       	ret

000003ca <LED_vTurnOn>:
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_vWrite_pin>
 3d0:	08 95       	ret

000003d2 <LED_vTurnOff>:
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_vWrite_pin>
 3d8:	08 95       	ret

000003da <LED8_vInitialize>:
 3da:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_set_port_direction>
 3de:	08 95       	ret

000003e0 <main>:
    #endif	

	#ifdef adc_interrupt
	
		unsigned short x;
		ADC_vinit(1,0,0,1);
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 a2 00 	call	0x144	; 0x144 <ADC_vinit>
		LED8_vInitialize('C',0XFF);
 3ec:	6f ef       	ldi	r22, 0xFF	; 255
 3ee:	83 e4       	ldi	r24, 0x43	; 67
 3f0:	0e 94 ed 01 	call	0x3da	; 0x3da <LED8_vInitialize>
		LED_vInit('b',2);
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	82 e6       	ldi	r24, 0x62	; 98
 3f8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_vInit>
		LED_vInit('b',0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	82 e6       	ldi	r24, 0x62	; 98
 400:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_vInit>
		LED_vInit('b',1);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e6       	ldi	r24, 0x62	; 98
 408:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_vInit>
			
        #endif
		
        #ifdef adc_interrupt
	   
		   LED_vTurnOff('B',2);
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	82 e4       	ldi	r24, 0x42	; 66
 410:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LED_vTurnOff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	89 e6       	ldi	r24, 0x69	; 105
 418:	98 e1       	ldi	r25, 0x18	; 24
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
		   _delay_ms(1000);
		   x=ADC_u16Read();
 426:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <ADC_u16Read>
		   PORTC=x;
 42a:	85 bb       	out	0x15, r24	; 21
		   PORTB=(x>>8);
 42c:	98 bb       	out	0x18, r25	; 24
 42e:	ee cf       	rjmp	.-36     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>

00000430 <__vector_16>:
}

	#ifdef adc_interrupt

		ISR(ADC_vect)
		{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
			LED_vTurnOn('B',2);
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	82 e4       	ldi	r24, 0x42	; 66
 456:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LED_vTurnOn>
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	89 e6       	ldi	r24, 0x69	; 105
 45e:	98 e1       	ldi	r25, 0x18	; 24
 460:	21 50       	subi	r18, 0x01	; 1
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <__vector_16+0x30>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__vector_16+0x3a>
 46a:	00 00       	nop
			_delay_ms(1000);
		}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__tablejump2__>:
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	05 90       	lpm	r0, Z+
 494:	f4 91       	lpm	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	09 94       	ijmp

0000049a <_exit>:
 49a:	f8 94       	cli

0000049c <__stop_program>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <__stop_program>
