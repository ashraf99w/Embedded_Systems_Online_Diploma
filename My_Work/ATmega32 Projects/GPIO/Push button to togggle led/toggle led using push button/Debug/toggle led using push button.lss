
toggle led using push button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac3  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005de  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000587  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000550  00000000  00000000  00002413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  8a:	0c 94 ef 01 	jmp	0x3de	; 0x3de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_vInit>:
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_vsetPINDir>
  98:	08 95       	ret

0000009a <LED_vTurnOn>:
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	0e 94 cf 00 	call	0x19e	; 0x19e <DIO_write>
  a0:	08 95       	ret

000000a2 <LED_vTurnOff>:
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	0e 94 cf 00 	call	0x19e	; 0x19e <DIO_write>
  a8:	08 95       	ret

000000aa <LED_vToggle>:
  aa:	0e 94 94 01 	call	0x328	; 0x328 <DIO_toggle>
  ae:	08 95       	ret

000000b0 <button_vInit>:
 *  Author: Mohamed Zaghlol
 */ 
#include "DIO.h"
void button_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_vsetPINDir>
  b6:	08 95       	ret

000000b8 <button_u8read>:
}
unsigned char button_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char x;
	x=DIO_u8read(portname,pinnumber);
  b8:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_u8read>
	return x ;
}
  bc:	08 95       	ret

000000be <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  be:	82 34       	cpi	r24, 0x42	; 66
  c0:	19 f1       	breq	.+70     	; 0x108 <DIO_vsetPINDir+0x4a>
  c2:	18 f4       	brcc	.+6      	; 0xca <DIO_vsetPINDir+0xc>
  c4:	81 34       	cpi	r24, 0x41	; 65
  c6:	39 f0       	breq	.+14     	; 0xd6 <DIO_vsetPINDir+0x18>
  c8:	08 95       	ret
  ca:	83 34       	cpi	r24, 0x43	; 67
  cc:	b1 f1       	breq	.+108    	; 0x13a <DIO_vsetPINDir+0x7c>
  ce:	84 34       	cpi	r24, 0x44	; 68
  d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_vsetPINDir+0x16>
  d2:	4c c0       	rjmp	.+152    	; 0x16c <DIO_vsetPINDir+0xae>
  d4:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	59 f4       	brne	.+22     	; 0xf0 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  da:	2a b3       	in	r18, 0x1a	; 26
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vsetPINDir+0x28>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vsetPINDir+0x24>
  ea:	82 2b       	or	r24, r18
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  f0:	2a b3       	in	r18, 0x1a	; 26
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x3e>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x3a>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	8a bb       	out	0x1a, r24	; 26
 106:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	59 f4       	brne	.+22     	; 0x122 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPINDir+0x5a>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPINDir+0x56>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_vsetPINDir+0x70>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_vsetPINDir+0x6c>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 138:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vsetPINDir+0x8c>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vsetPINDir+0x88>
 14e:	82 2b       	or	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
 152:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vsetPINDir+0xa2>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vsetPINDir+0x9e>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	84 bb       	out	0x14, r24	; 20
 16a:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vsetPINDir+0xbe>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vsetPINDir+0xba>
 180:	82 2b       	or	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vsetPINDir+0xd4>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vsetPINDir+0xd0>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	81 bb       	out	0x11, r24	; 17
 19c:	08 95       	ret

0000019e <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 19e:	82 34       	cpi	r24, 0x42	; 66
 1a0:	19 f1       	breq	.+70     	; 0x1e8 <DIO_write+0x4a>
 1a2:	18 f4       	brcc	.+6      	; 0x1aa <DIO_write+0xc>
 1a4:	81 34       	cpi	r24, 0x41	; 65
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <DIO_write+0x18>
 1a8:	08 95       	ret
 1aa:	83 34       	cpi	r24, 0x43	; 67
 1ac:	b1 f1       	breq	.+108    	; 0x21a <DIO_write+0x7c>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <DIO_write+0x16>
 1b2:	4c c0       	rjmp	.+152    	; 0x24c <DIO_write+0xae>
 1b4:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	59 f4       	brne	.+22     	; 0x1d0 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_write+0x28>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_write+0x24>
 1ca:	82 2b       	or	r24, r18
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_write+0x3e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_write+0x3a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	59 f4       	brne	.+22     	; 0x202 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1ec:	28 b3       	in	r18, 0x18	; 24
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_write+0x5a>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_write+0x56>
 1fc:	82 2b       	or	r24, r18
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 202:	28 b3       	in	r18, 0x18	; 24
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_write+0x70>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_write+0x6c>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	88 bb       	out	0x18, r24	; 24
 218:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	59 f4       	brne	.+22     	; 0x234 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 21e:	25 b3       	in	r18, 0x15	; 21
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_write+0x8c>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_write+0x88>
 22e:	82 2b       	or	r24, r18
 230:	85 bb       	out	0x15, r24	; 21
 232:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0xa2>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x9e>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	85 bb       	out	0x15, r24	; 21
 24a:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 250:	22 b3       	in	r18, 0x12	; 18
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_write+0xbe>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_write+0xba>
 260:	82 2b       	or	r24, r18
 262:	82 bb       	out	0x12, r24	; 18
 264:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 266:	22 b3       	in	r18, 0x12	; 18
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_write+0xd4>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_write+0xd0>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret

0000027e <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 27e:	82 34       	cpi	r24, 0x42	; 66
 280:	d9 f0       	breq	.+54     	; 0x2b8 <DIO_u8read+0x3a>
 282:	18 f4       	brcc	.+6      	; 0x28a <DIO_u8read+0xc>
 284:	81 34       	cpi	r24, 0x41	; 65
 286:	31 f0       	breq	.+12     	; 0x294 <DIO_u8read+0x16>
 288:	4d c0       	rjmp	.+154    	; 0x324 <DIO_u8read+0xa6>
 28a:	83 34       	cpi	r24, 0x43	; 67
 28c:	39 f1       	breq	.+78     	; 0x2dc <DIO_u8read+0x5e>
 28e:	84 34       	cpi	r24, 0x44	; 68
 290:	b9 f1       	breq	.+110    	; 0x300 <DIO_u8read+0x82>
 292:	48 c0       	rjmp	.+144    	; 0x324 <DIO_u8read+0xa6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 294:	29 b3       	in	r18, 0x19	; 25
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	06 2e       	mov	r0, r22
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8read+0x24>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8read+0x20>
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	82 23       	and	r24, r18
 2aa:	93 23       	and	r25, r19
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_u8read+0x34>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_u8read+0x30>
		break;
 2b6:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2b8:	26 b3       	in	r18, 0x16	; 22
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	06 2e       	mov	r0, r22
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_u8read+0x48>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_u8read+0x44>
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	82 23       	and	r24, r18
 2ce:	93 23       	and	r25, r19
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_u8read+0x58>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_u8read+0x54>
		break;
 2da:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 2dc:	23 b3       	in	r18, 0x13	; 19
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	06 2e       	mov	r0, r22
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_u8read+0x6c>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_u8read+0x68>
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	82 23       	and	r24, r18
 2f2:	93 23       	and	r25, r19
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_u8read+0x7c>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_u8read+0x78>
		break;
 2fe:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 300:	20 b3       	in	r18, 0x10	; 16
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	06 2e       	mov	r0, r22
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_u8read+0x90>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_u8read+0x8c>
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	82 23       	and	r24, r18
 316:	93 23       	and	r25, r19
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8read+0xa0>
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_u8read+0x9c>
		break;
 322:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 324:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 326:	08 95       	ret

00000328 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 328:	82 34       	cpi	r24, 0x42	; 66
 32a:	a1 f0       	breq	.+40     	; 0x354 <DIO_toggle+0x2c>
 32c:	18 f4       	brcc	.+6      	; 0x334 <DIO_toggle+0xc>
 32e:	81 34       	cpi	r24, 0x41	; 65
 330:	31 f0       	breq	.+12     	; 0x33e <DIO_toggle+0x16>
 332:	08 95       	ret
 334:	83 34       	cpi	r24, 0x43	; 67
 336:	c9 f0       	breq	.+50     	; 0x36a <DIO_toggle+0x42>
 338:	84 34       	cpi	r24, 0x44	; 68
 33a:	11 f1       	breq	.+68     	; 0x380 <DIO_toggle+0x58>
 33c:	08 95       	ret
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 33e:	2b b3       	in	r18, 0x1b	; 27
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_toggle+0x22>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_toggle+0x1e>
 34e:	82 27       	eor	r24, r18
 350:	8b bb       	out	0x1b, r24	; 27
		break;
 352:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 354:	28 b3       	in	r18, 0x18	; 24
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_toggle+0x38>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_toggle+0x34>
 364:	82 27       	eor	r24, r18
 366:	88 bb       	out	0x18, r24	; 24
		break;
 368:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 36a:	25 b3       	in	r18, 0x15	; 21
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_toggle+0x4e>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_toggle+0x4a>
 37a:	82 27       	eor	r24, r18
 37c:	85 bb       	out	0x15, r24	; 21
		break;
 37e:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 380:	22 b3       	in	r18, 0x12	; 18
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_toggle+0x64>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_toggle+0x60>
 390:	82 27       	eor	r24, r18
 392:	82 bb       	out	0x12, r24	; 18
 394:	08 95       	ret

00000396 <main>:
#include "button.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	button_vInit('D',0);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	84 e4       	ldi	r24, 0x44	; 68
 39a:	0e 94 58 00 	call	0xb0	; 0xb0 <button_vInit>
	LED_vInit('D',1);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	84 e4       	ldi	r24, 0x44	; 68
 3a2:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
	unsigned char return_val;
	unsigned char prev_val=0;
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
	
    while(1)
    {
		/* toggling only when the button pushed (pull-down) */
         return_val=button_u8read('D',0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	84 e4       	ldi	r24, 0x44	; 68
 3ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <button_u8read>
		 if ((return_val==1) && (prev_val==0))
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	41 f4       	brne	.+16     	; 0x3c4 <main+0x2e>
 3b4:	c1 11       	cpse	r28, r1
 3b6:	09 c0       	rjmp	.+18     	; 0x3ca <main+0x34>
		 {
			 LED_vToggle('D',1);
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	84 e4       	ldi	r24, 0x44	; 68
 3bc:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
			 prev_val=1;
 3c0:	c1 e0       	ldi	r28, 0x01	; 1
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <main+0x34>
		 }
		 else if(return_val==0)
 3c4:	81 11       	cpse	r24, r1
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <main+0x34>
		 {
			prev_val=0; 
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	2f e7       	ldi	r18, 0x7F	; 127
 3cc:	88 e3       	ldi	r24, 0x38	; 56
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0x3a>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x44>
 3da:	00 00       	nop
 3dc:	e5 cf       	rjmp	.-54     	; 0x3a8 <main+0x12>

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
