
control led using button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a28  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051a  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002682  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_vInit>:
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 77 00 	call	0xee	; 0xee <DIO_vsetPINDir>
  98:	08 95       	ret

0000009a <LED_vTurnOn>:
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
  a0:	08 95       	ret

000000a2 <LED_vTurnOff>:
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
  a8:	08 95       	ret

000000aa <LED_vToggle>:
  aa:	0e 94 ac 01 	call	0x358	; 0x358 <DIO_toggle>
  ae:	08 95       	ret

000000b0 <button_vInit>:
 *  Author: Mohamed Zaghlol
 */ 
#include "DIO.h"
void button_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 77 00 	call	0xee	; 0xee <DIO_vsetPINDir>
  b6:	08 95       	ret

000000b8 <button_u8read>:
}
unsigned char button_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char x;
	x=DIO_u8read(portname,pinnumber);
  b8:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_u8read>
	return x ;
}
  bc:	08 95       	ret

000000be <main>:

#include "LED.h"
#include "button.h"
int main(void)
{
	button_vInit('D',0);//Configure Pin As Input
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	84 e4       	ldi	r24, 0x44	; 68
  c2:	0e 94 58 00 	call	0xb0	; 0xb0 <button_vInit>
	LED_vInit('D',1);//Configure Pin As Output
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
	unsigned char z;
    while(1)
    {
       z=button_u8read('D',0);//Reading The Value On Pin
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	84 e4       	ldi	r24, 0x44	; 68
  d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <button_u8read>
	   if (z==1)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	29 f4       	brne	.+10     	; 0xe4 <main+0x26>
	   {
		   LED_vTurnOn('D',1);//ON
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	84 e4       	ldi	r24, 0x44	; 68
  de:	0e 94 4d 00 	call	0x9a	; 0x9a <LED_vTurnOn>
  e2:	f5 cf       	rjmp	.-22     	; 0xce <main+0x10>
	   }
	   else
	   {
		   LED_vTurnOff('D',1);//Off
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	84 e4       	ldi	r24, 0x44	; 68
  e8:	0e 94 51 00 	call	0xa2	; 0xa2 <LED_vTurnOff>
  ec:	f0 cf       	rjmp	.-32     	; 0xce <main+0x10>

000000ee <DIO_vsetPINDir>:
#include <avr/io.h>
#include "DIO.h"
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  ee:	82 34       	cpi	r24, 0x42	; 66
  f0:	19 f1       	breq	.+70     	; 0x138 <DIO_vsetPINDir+0x4a>
  f2:	18 f4       	brcc	.+6      	; 0xfa <DIO_vsetPINDir+0xc>
  f4:	81 34       	cpi	r24, 0x41	; 65
  f6:	39 f0       	breq	.+14     	; 0x106 <DIO_vsetPINDir+0x18>
  f8:	08 95       	ret
  fa:	83 34       	cpi	r24, 0x43	; 67
  fc:	b1 f1       	breq	.+108    	; 0x16a <DIO_vsetPINDir+0x7c>
  fe:	84 34       	cpi	r24, 0x44	; 68
 100:	09 f4       	brne	.+2      	; 0x104 <DIO_vsetPINDir+0x16>
 102:	4c c0       	rjmp	.+152    	; 0x19c <DIO_vsetPINDir+0xae>
 104:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	59 f4       	brne	.+22     	; 0x120 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x28>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x24>
 11a:	82 2b       	or	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 120:	2a b3       	in	r18, 0x1a	; 26
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_vsetPINDir+0x3e>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_vsetPINDir+0x3a>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	8a bb       	out	0x1a, r24	; 26
 136:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	59 f4       	brne	.+22     	; 0x152 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 13c:	27 b3       	in	r18, 0x17	; 23
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_vsetPINDir+0x5a>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_vsetPINDir+0x56>
 14c:	82 2b       	or	r24, r18
 14e:	87 bb       	out	0x17, r24	; 23
 150:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_vsetPINDir+0x70>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_vsetPINDir+0x6c>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_vsetPINDir+0x8c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_vsetPINDir+0x88>
 17e:	82 2b       	or	r24, r18
 180:	84 bb       	out	0x14, r24	; 20
 182:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 184:	24 b3       	in	r18, 0x14	; 20
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_vsetPINDir+0xa2>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_vsetPINDir+0x9e>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	84 bb       	out	0x14, r24	; 20
 19a:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_vsetPINDir+0xbe>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_vsetPINDir+0xba>
 1b0:	82 2b       	or	r24, r18
 1b2:	81 bb       	out	0x11, r24	; 17
 1b4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 1b6:	21 b3       	in	r18, 0x11	; 17
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_vsetPINDir+0xd4>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_vsetPINDir+0xd0>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	81 bb       	out	0x11, r24	; 17
 1cc:	08 95       	ret

000001ce <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1ce:	82 34       	cpi	r24, 0x42	; 66
 1d0:	19 f1       	breq	.+70     	; 0x218 <DIO_write+0x4a>
 1d2:	18 f4       	brcc	.+6      	; 0x1da <DIO_write+0xc>
 1d4:	81 34       	cpi	r24, 0x41	; 65
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <DIO_write+0x18>
 1d8:	08 95       	ret
 1da:	83 34       	cpi	r24, 0x43	; 67
 1dc:	b1 f1       	breq	.+108    	; 0x24a <DIO_write+0x7c>
 1de:	84 34       	cpi	r24, 0x44	; 68
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <DIO_write+0x16>
 1e2:	4c c0       	rjmp	.+152    	; 0x27c <DIO_write+0xae>
 1e4:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_write+0x28>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_write+0x24>
 1fa:	82 2b       	or	r24, r18
 1fc:	8b bb       	out	0x1b, r24	; 27
 1fe:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_write+0x3e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_write+0x3a>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	8b bb       	out	0x1b, r24	; 27
 216:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_write+0x5a>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_write+0x56>
 22c:	82 2b       	or	r24, r18
 22e:	88 bb       	out	0x18, r24	; 24
 230:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 232:	28 b3       	in	r18, 0x18	; 24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_write+0x70>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_write+0x6c>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	88 bb       	out	0x18, r24	; 24
 248:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	59 f4       	brne	.+22     	; 0x264 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0x8c>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0x88>
 25e:	82 2b       	or	r24, r18
 260:	85 bb       	out	0x15, r24	; 21
 262:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 264:	25 b3       	in	r18, 0x15	; 21
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0xa2>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0x9e>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	59 f4       	brne	.+22     	; 0x296 <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_write+0xbe>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_write+0xba>
 290:	82 2b       	or	r24, r18
 292:	82 bb       	out	0x12, r24	; 18
 294:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 296:	22 b3       	in	r18, 0x12	; 18
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_write+0xd4>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_write+0xd0>
 2a6:	80 95       	com	r24
 2a8:	82 23       	and	r24, r18
 2aa:	82 bb       	out	0x12, r24	; 18
 2ac:	08 95       	ret

000002ae <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2ae:	82 34       	cpi	r24, 0x42	; 66
 2b0:	d9 f0       	breq	.+54     	; 0x2e8 <DIO_u8read+0x3a>
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <DIO_u8read+0xc>
 2b4:	81 34       	cpi	r24, 0x41	; 65
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <DIO_u8read+0x16>
 2b8:	4d c0       	rjmp	.+154    	; 0x354 <DIO_u8read+0xa6>
 2ba:	83 34       	cpi	r24, 0x43	; 67
 2bc:	39 f1       	breq	.+78     	; 0x30c <DIO_u8read+0x5e>
 2be:	84 34       	cpi	r24, 0x44	; 68
 2c0:	b9 f1       	breq	.+110    	; 0x330 <DIO_u8read+0x82>
 2c2:	48 c0       	rjmp	.+144    	; 0x354 <DIO_u8read+0xa6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2c4:	29 b3       	in	r18, 0x19	; 25
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	06 2e       	mov	r0, r22
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_u8read+0x24>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_u8read+0x20>
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	82 23       	and	r24, r18
 2da:	93 23       	and	r25, r19
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8read+0x34>
 2de:	95 95       	asr	r25
 2e0:	87 95       	ror	r24
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8read+0x30>
		break;
 2e6:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2e8:	26 b3       	in	r18, 0x16	; 22
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	06 2e       	mov	r0, r22
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8read+0x48>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8read+0x44>
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	82 23       	and	r24, r18
 2fe:	93 23       	and	r25, r19
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_u8read+0x58>
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_u8read+0x54>
		break;
 30a:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 30c:	23 b3       	in	r18, 0x13	; 19
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8read+0x6c>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8read+0x68>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8read+0x7c>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8read+0x78>
		break;
 32e:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 330:	20 b3       	in	r18, 0x10	; 16
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	06 2e       	mov	r0, r22
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8read+0x90>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8read+0x8c>
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	82 23       	and	r24, r18
 346:	93 23       	and	r25, r19
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8read+0xa0>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8read+0x9c>
		break;
 352:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 354:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 356:	08 95       	ret

00000358 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 358:	82 34       	cpi	r24, 0x42	; 66
 35a:	a1 f0       	breq	.+40     	; 0x384 <DIO_toggle+0x2c>
 35c:	18 f4       	brcc	.+6      	; 0x364 <DIO_toggle+0xc>
 35e:	81 34       	cpi	r24, 0x41	; 65
 360:	31 f0       	breq	.+12     	; 0x36e <DIO_toggle+0x16>
 362:	08 95       	ret
 364:	83 34       	cpi	r24, 0x43	; 67
 366:	c9 f0       	breq	.+50     	; 0x39a <DIO_toggle+0x42>
 368:	84 34       	cpi	r24, 0x44	; 68
 36a:	11 f1       	breq	.+68     	; 0x3b0 <DIO_toggle+0x58>
 36c:	08 95       	ret
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 36e:	2b b3       	in	r18, 0x1b	; 27
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_toggle+0x22>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_toggle+0x1e>
 37e:	82 27       	eor	r24, r18
 380:	8b bb       	out	0x1b, r24	; 27
		break;
 382:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 384:	28 b3       	in	r18, 0x18	; 24
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_toggle+0x38>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_toggle+0x34>
 394:	82 27       	eor	r24, r18
 396:	88 bb       	out	0x18, r24	; 24
		break;
 398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_toggle+0x4e>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_toggle+0x4a>
 3aa:	82 27       	eor	r24, r18
 3ac:	85 bb       	out	0x15, r24	; 21
		break;
 3ae:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3b0:	22 b3       	in	r18, 0x12	; 18
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_toggle+0x64>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_toggle+0x60>
 3c0:	82 27       	eor	r24, r18
 3c2:	82 bb       	out	0x12, r24	; 18
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
