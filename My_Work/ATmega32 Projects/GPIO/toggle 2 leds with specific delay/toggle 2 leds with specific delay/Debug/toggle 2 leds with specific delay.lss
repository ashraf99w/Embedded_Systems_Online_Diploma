
toggle 2 leds with specific delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b14  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bc  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000576  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  8a:	0c 94 14 02 	jmp	0x428	; 0x428 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_vInit>:
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
  98:	08 95       	ret

0000009a <LED_vTurnOn>:
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_write>
  a0:	08 95       	ret

000000a2 <LED_vTurnOff>:
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_write>
  a8:	08 95       	ret

000000aa <LED_vToggle>:
  aa:	0e 94 90 01 	call	0x320	; 0x320 <DIO_toggle>
  ae:	08 95       	ret

000000b0 <LED_u8ReadStatus>:
  b0:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_u8read>
  b4:	08 95       	ret

000000b6 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "DIO.h"
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  b6:	82 34       	cpi	r24, 0x42	; 66
  b8:	19 f1       	breq	.+70     	; 0x100 <DIO_vsetPINDir+0x4a>
  ba:	18 f4       	brcc	.+6      	; 0xc2 <DIO_vsetPINDir+0xc>
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	39 f0       	breq	.+14     	; 0xce <DIO_vsetPINDir+0x18>
  c0:	08 95       	ret
  c2:	83 34       	cpi	r24, 0x43	; 67
  c4:	b1 f1       	breq	.+108    	; 0x132 <DIO_vsetPINDir+0x7c>
  c6:	84 34       	cpi	r24, 0x44	; 68
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_vsetPINDir+0x16>
  ca:	4c c0       	rjmp	.+152    	; 0x164 <DIO_vsetPINDir+0xae>
  cc:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	59 f4       	brne	.+22     	; 0xe8 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPINDir+0x28>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPINDir+0x24>
  e2:	82 2b       	or	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  e8:	2a b3       	in	r18, 0x1a	; 26
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_vsetPINDir+0x3e>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_vsetPINDir+0x3a>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	59 f4       	brne	.+22     	; 0x11a <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_vsetPINDir+0x5a>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_vsetPINDir+0x56>
 114:	82 2b       	or	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_vsetPINDir+0x70>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_vsetPINDir+0x6c>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	59 f4       	brne	.+22     	; 0x14c <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_vsetPINDir+0x8c>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_vsetPINDir+0x88>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_vsetPINDir+0xa2>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_vsetPINDir+0x9e>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
 162:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	59 f4       	brne	.+22     	; 0x17e <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetPINDir+0xbe>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetPINDir+0xba>
 178:	82 2b       	or	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xd4>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xd0>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 196:	82 34       	cpi	r24, 0x42	; 66
 198:	19 f1       	breq	.+70     	; 0x1e0 <DIO_write+0x4a>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <DIO_write+0xc>
 19c:	81 34       	cpi	r24, 0x41	; 65
 19e:	39 f0       	breq	.+14     	; 0x1ae <DIO_write+0x18>
 1a0:	08 95       	ret
 1a2:	83 34       	cpi	r24, 0x43	; 67
 1a4:	b1 f1       	breq	.+108    	; 0x212 <DIO_write+0x7c>
 1a6:	84 34       	cpi	r24, 0x44	; 68
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_write+0x16>
 1aa:	4c c0       	rjmp	.+152    	; 0x244 <DIO_write+0xae>
 1ac:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_write+0x28>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_write+0x24>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_write+0x3e>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_write+0x3a>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write+0x5a>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write+0x56>
 1f4:	82 2b       	or	r24, r18
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_write+0x70>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_write+0x6c>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_write+0x8c>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_write+0x88>
 226:	82 2b       	or	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 22c:	25 b3       	in	r18, 0x15	; 21
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_write+0xa2>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_write+0x9e>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f4       	brne	.+22     	; 0x25e <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_write+0xbe>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_write+0xba>
 258:	82 2b       	or	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 25e:	22 b3       	in	r18, 0x12	; 18
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_write+0xd4>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_write+0xd0>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
 274:	08 95       	ret

00000276 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 276:	82 34       	cpi	r24, 0x42	; 66
 278:	d9 f0       	breq	.+54     	; 0x2b0 <DIO_u8read+0x3a>
 27a:	18 f4       	brcc	.+6      	; 0x282 <DIO_u8read+0xc>
 27c:	81 34       	cpi	r24, 0x41	; 65
 27e:	31 f0       	breq	.+12     	; 0x28c <DIO_u8read+0x16>
 280:	4d c0       	rjmp	.+154    	; 0x31c <DIO_u8read+0xa6>
 282:	83 34       	cpi	r24, 0x43	; 67
 284:	39 f1       	breq	.+78     	; 0x2d4 <DIO_u8read+0x5e>
 286:	84 34       	cpi	r24, 0x44	; 68
 288:	b9 f1       	breq	.+110    	; 0x2f8 <DIO_u8read+0x82>
 28a:	48 c0       	rjmp	.+144    	; 0x31c <DIO_u8read+0xa6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 28c:	29 b3       	in	r18, 0x19	; 25
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	06 2e       	mov	r0, r22
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8read+0x24>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8read+0x20>
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	82 23       	and	r24, r18
 2a2:	93 23       	and	r25, r19
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8read+0x34>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8read+0x30>
		break;
 2ae:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2b0:	26 b3       	in	r18, 0x16	; 22
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	06 2e       	mov	r0, r22
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_u8read+0x48>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_u8read+0x44>
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	82 23       	and	r24, r18
 2c6:	93 23       	and	r25, r19
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8read+0x58>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8read+0x54>
		break;
 2d2:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 2d4:	23 b3       	in	r18, 0x13	; 19
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	06 2e       	mov	r0, r22
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8read+0x6c>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8read+0x68>
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	82 23       	and	r24, r18
 2ea:	93 23       	and	r25, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8read+0x7c>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8read+0x78>
		break;
 2f6:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 2f8:	20 b3       	in	r18, 0x10	; 16
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	06 2e       	mov	r0, r22
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_u8read+0x90>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_u8read+0x8c>
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	82 23       	and	r24, r18
 30e:	93 23       	and	r25, r19
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_u8read+0xa0>
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_u8read+0x9c>
		break;
 31a:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 31c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 31e:	08 95       	ret

00000320 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 320:	82 34       	cpi	r24, 0x42	; 66
 322:	a1 f0       	breq	.+40     	; 0x34c <DIO_toggle+0x2c>
 324:	18 f4       	brcc	.+6      	; 0x32c <DIO_toggle+0xc>
 326:	81 34       	cpi	r24, 0x41	; 65
 328:	31 f0       	breq	.+12     	; 0x336 <DIO_toggle+0x16>
 32a:	08 95       	ret
 32c:	83 34       	cpi	r24, 0x43	; 67
 32e:	c9 f0       	breq	.+50     	; 0x362 <DIO_toggle+0x42>
 330:	84 34       	cpi	r24, 0x44	; 68
 332:	11 f1       	breq	.+68     	; 0x378 <DIO_toggle+0x58>
 334:	08 95       	ret
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 336:	2b b3       	in	r18, 0x1b	; 27
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_toggle+0x22>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_toggle+0x1e>
 346:	82 27       	eor	r24, r18
 348:	8b bb       	out	0x1b, r24	; 27
		break;
 34a:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 34c:	28 b3       	in	r18, 0x18	; 24
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_toggle+0x38>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_toggle+0x34>
 35c:	82 27       	eor	r24, r18
 35e:	88 bb       	out	0x18, r24	; 24
		break;
 360:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 362:	25 b3       	in	r18, 0x15	; 21
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_toggle+0x4e>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_toggle+0x4a>
 372:	82 27       	eor	r24, r18
 374:	85 bb       	out	0x15, r24	; 21
		break;
 376:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 378:	22 b3       	in	r18, 0x12	; 18
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_toggle+0x64>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_toggle+0x60>
 388:	82 27       	eor	r24, r18
 38a:	82 bb       	out	0x12, r24	; 18
 38c:	08 95       	ret

0000038e <main>:
#include "LED.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	LED_vInit('D',0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	84 e4       	ldi	r24, 0x44	; 68
 392:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
    LED_vInit('D',1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	84 e4       	ldi	r24, 0x44	; 68
 39a:	0e 94 49 00 	call	0x92	; 0x92 <LED_vInit>
	
	LED_vTurnOff('D',0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	84 e4       	ldi	r24, 0x44	; 68
 3a2:	0e 94 51 00 	call	0xa2	; 0xa2 <LED_vTurnOff>
	LED_vTurnOff('D',1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	84 e4       	ldi	r24, 0x44	; 68
 3aa:	0e 94 51 00 	call	0xa2	; 0xa2 <LED_vTurnOff>
   while(1)
    {  LED_vToggle('D',0);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	84 e4       	ldi	r24, 0x44	; 68
 3b2:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
	   LED_vToggle('D',1);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	84 e4       	ldi	r24, 0x44	; 68
 3ba:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	89 e6       	ldi	r24, 0x69	; 105
 3c2:	98 e1       	ldi	r25, 0x18	; 24
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x36>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x40>
 3ce:	00 00       	nop
	   _delay_ms(1000);
	   LED_vToggle('D',0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	84 e4       	ldi	r24, 0x44	; 68
 3d4:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	89 e6       	ldi	r24, 0x69	; 105
 3dc:	98 e1       	ldi	r25, 0x18	; 24
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x50>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x5a>
 3e8:	00 00       	nop
	   _delay_ms(1000);
	   LED_vToggle('D',0);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	84 e4       	ldi	r24, 0x44	; 68
 3ee:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
	   LED_vToggle('D',1);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	84 e4       	ldi	r24, 0x44	; 68
 3f6:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	89 e6       	ldi	r24, 0x69	; 105
 3fe:	98 e1       	ldi	r25, 0x18	; 24
 400:	21 50       	subi	r18, 0x01	; 1
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	   _delay_ms(1000);
	   LED_vToggle('D',0); 
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	84 e4       	ldi	r24, 0x44	; 68
 410:	0e 94 55 00 	call	0xaa	; 0xaa <LED_vToggle>
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	89 e6       	ldi	r24, 0x69	; 105
 418:	98 e1       	ldi	r25, 0x18	; 24
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	c3 cf       	rjmp	.-122    	; 0x3ae <main+0x20>

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
